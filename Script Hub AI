-- Phantom Hub v4.0
-- Universal Roblox GUI
-- Compatible with popular executors

-- Check executor compatibility
local executorCheck = {
    ["Synapse X"] = syn,
    ["Script-Ware"] = getgenv().sirhurt,
    ["KRNL"] = KRNL_LOADED,
    ["Sentinel"] = sentinel,
    ["ProtoSmasher"] = PROTOSMASHER_LOADED
}

local supported = false
local executor = "Unknown"

for name, check in pairs(executorCheck) do
    if check then
        supported = true
        executor = name
        break
    end
end

if not supported then
    warn("⚠️ Executor not recognized. Some features may not work properly.")
end

-- Core Services with pcall for safety
local Services = setmetatable({}, {
    __index = function(self, service)
        local success, result = pcall(function()
            return game:GetService(service)
        end)
        if success then
            self[service] = result
            return result
        else
            warn("⚠️ Failed to get service:", service)
            return nil
        end
    end
})

-- Safe function calls
local function safeFunction(name, func, ...)
    local success, result = pcall(func, ...)
    if not success then
        warn("⚠️ Error in", name, ":", result)
        return nil
    end
    return result
end

-- Core Settings
local SETTINGS = {
    VERSION = "4.0",
    BUILD = "Universal",
    DEFAULT_SIZE = UDim2.new(0, 800, 0, 500),
    MIN_SIZE = UDim2.new(0, 800, 0, 40),
    DEFAULT_POSITION = UDim2.new(0.5, -400, 0.5, -250),
    ANIMATION_SPEED = 0.3,
    SAVE_KEY = "PhantomHub_Settings_v4",
    AUTO_SAVE = true,
    DEBUG_MODE = false
}

-- Theme System
local COLORS = {
    Background = Color3.fromRGB(25, 25, 35),
    Secondary = Color3.fromRGB(30, 30, 45),
    Accent = Color3.fromRGB(90, 70, 255),
    Text = Color3.fromRGB(255, 255, 255),
    TextDark = Color3.fromRGB(200, 200, 200),
    Success = Color3.fromRGB(46, 182, 125),
    Warning = Color3.fromRGB(255, 178, 62),
    Error = Color3.fromRGB(240, 71, 71),
    Highlight = Color3.fromRGB(120, 100, 255),
    Muted = Color3.fromRGB(150, 150, 150)
}

-- Asset IDs (verified working)
local ICONS = {
    LOGO = "rbxassetid://6031280882",
    HOME = "rbxassetid://6026568198",
    PLAYER = "rbxassetid://6034287516",
    SCRIPTS = "rbxassetid://6034227067",
    SETTINGS = "rbxassetid://6031280882",
    DEBUG = "rbxassetid://6034509993",
    CLOSE = "rbxassetid://6035047409",
    MINIMIZE = "rbxassetid://6035067836",
    PIN = "rbxassetid://6034973076",
    REFRESH = "rbxassetid://6031097226",
    SEARCH = "rbxassetid://6031154871",
    WARNING = "rbxassetid://6031071053",
    SUCCESS = "rbxassetid://6031094670",
    ERROR = "rbxassetid://6031071057"
}

-- Executor-specific functions
local function setClipboard(text)
    if syn then
        syn.write_clipboard(text)
    elseif executor == "Script-Ware" then
        writefile("clipboard.txt", text)
    else
        warn("⚠️ Clipboard function not supported on this executor")
    end
end

local function protectGui(gui)
    if syn then
        syn.protect_gui(gui)
    elseif executor == "Script-Ware" then
        gui.Parent = gethui()
    else
        gui.Parent = game:GetService("CoreGui")
    end
end

-- Core Utility Functions
local Utility = {}

function Utility.formatNumber(number)
    if type(number) ~= "number" then return "0" end
    if number >= 1000000 then
        return string.format("%.1fM", number / 1000000)
    elseif number >= 1000 then
        return string.format("%.1fK", number / 1000)
    end
    return tostring(number)
end

function Utility.getTimezone(offset)
    local success, time = pcall(function()
        return os.time() + (offset * 3600)
    end)
    if success then
        return os.date("%I:%M %p", time)
    end
    return "00:00 AM"
end

function Utility.formatTime(seconds)
    local days = math.floor(seconds / 86400)
    local hours = math.floor((seconds % 86400) / 3600)
    local minutes = math.floor((seconds % 3600) / 60)
    local secs = seconds % 60
    
    if days > 0 then
        return string.format("%dd %dh %dm", days, hours, minutes)
    elseif hours > 0 then
        return string.format("%dh %dm %ds", hours, minutes, secs)
    else
        return string.format("%dm %ds", minutes, secs)
    end
end

-- Initialize PhantomHub object
local PhantomHub = {
    initialized = false,
    startTime = tick(),
    executor = executor,
    utility = Utility,
    settings = SETTINGS,
    colors = COLORS,
    icons = ICONS
}-- Enhanced UI System & Animations
local UI = {}
UI.__index = UI

-- Import core components
local PhantomHub = shared.PhantomHub or getgenv().PhantomHub
local Services = PhantomHub.Services
local COLORS = PhantomHub.colors
local ICONS = PhantomHub.icons

-- Animation presets
local ANIMATIONS = {
    fadeIn = {
        properties = {
            BackgroundTransparency = 0,
            TextTransparency = 0,
            ImageTransparency = 0
        },
        time = 0.3,
        style = Enum.EasingStyle.Quad,
        direction = Enum.EasingDirection.Out
    },
    fadeOut = {
        properties = {
            BackgroundTransparency = 1,
            TextTransparency = 1,
            ImageTransparency = 1
        },
        time = 0.3,
        style = Enum.EasingStyle.Quad,
        direction = Enum.EasingDirection.Out
    },
    scaleUp = {
        properties = {
            Size = UDim2.new(1, 0, 1, 0),
            Position = UDim2.new(0, 0, 0, 0)
        },
        time = 0.3,
        style = Enum.EasingStyle.Back,
        direction = Enum.EasingDirection.Out
    },
    slideIn = {
        properties = {
            Position = UDim2.new(0, 0, 0, 0)
        },
        time = 0.3,
        style = Enum.EasingStyle.Quad,
        direction = Enum.EasingDirection.Out
    }
}

-- Enhanced Instance Creation
function UI.create(className, properties)
    local instance = Instance.new(className)
    
    -- Apply default properties based on class type
    if className == "Frame" or className == "TextButton" or className == "TextBox" then
        instance.BackgroundColor3 = COLORS.Secondary
        instance.BorderSizePixel = 0
        
        -- Add corner rounding by default
        local corner = Instance.new("UICorner")
        corner.CornerRadius = UDim.new(0, 6)
        corner.Parent = instance
        
        -- Add subtle shadow
        local shadow = Instance.new("ImageLabel")
        shadow.AnchorPoint = Vector2.new(0.5, 0.5)
        shadow.BackgroundTransparency = 1
        shadow.Position = UDim2.new(0.5, 0, 0.5, 0)
        shadow.Size = UDim2.new(1, 47, 1, 47)
        shadow.ZIndex = -1
        shadow.Image = "rbxassetid://6014261993"
        shadow.ImageColor3 = Color3.fromRGB(0, 0, 0)
        shadow.ImageTransparency = 0.5
        shadow.Parent = instance
    end
    
    if className == "TextLabel" or className == "TextButton" or className == "TextBox" then
        instance.TextColor3 = COLORS.Text
        instance.Font = Enum.Font.GothamMedium
        instance.TextSize = 14
    end
    
    -- Apply custom properties
    for property, value in pairs(properties or {}) do
        instance[property] = value
    end
    
    return instance
end

-- Enhanced Animation System
function UI.animate(instance, animationType, customProperties)
    local animation = ANIMATIONS[animationType]
    if not animation then return end
    
    local properties = customProperties or animation.properties
    local info = TweenInfo.new(
        animation.time,
        animation.style,
        animation.direction
    )
    
    local tween = Services.TweenService:Create(instance, info, properties)
    tween:Play()
    
    return tween
end

-- Create ripple effect
function UI.createRipple(button)
    button.ClipsDescendants = true
    
    button.MouseButton1Down:Connect(function(x, y)
        local ripple = UI.create("Frame", {
            Position = UDim2.new(0, x - button.AbsolutePosition.X, 0, y - button.AbsolutePosition.Y),
            Size = UDim2.new(0, 0, 0, 0),
            BackgroundColor3 = COLORS.Text,
            BackgroundTransparency = 0.6,
            AnchorPoint = Vector2.new(0.5, 0.5),
            Parent = button
        })
        
        local corner = Instance.new("UICorner")
        corner.CornerRadius = UDim.new(1, 0)
        corner.Parent = ripple
        
        local targetSize = UDim2.new(0, button.AbsoluteSize.X * 1.5, 0, button.AbsoluteSize.X * 1.5)
        
        UI.animate(ripple, "custom", {
            Size = targetSize,
            BackgroundTransparency = 1
        })
        
        game:GetService("Debris"):AddItem(ripple, 0.5)
    end)
end

-- Create hover effect
function UI.createHoverEffect(instance)
    local originalColor = instance.BackgroundColor3
    local originalTransparency = instance.BackgroundTransparency
    
    instance.MouseEnter:Connect(function()
        UI.animate(instance, "custom", {
            BackgroundColor3 = COLORS.Highlight,
            BackgroundTransparency = originalTransparency * 0.8
        })
    end)
    
    instance.MouseLeave:Connect(function()
        UI.animate(instance, "custom", {
            BackgroundColor3 = originalColor,
            BackgroundTransparency = originalTransparency
        })
    end)
end

-- Create a slider
function UI.createSlider(properties)
    local slider = UI.create("Frame", {
        Size = UDim2.new(1, 0, 0, 40),
        BackgroundTransparency = 1
    })
    
    local title = UI.create("TextLabel", {
        Size = UDim2.new(1, 0, 0, 20),
        BackgroundTransparency = 1,
        Text = properties.title,
        Parent = slider
    })
    
    local sliderBar = UI.create("Frame", {
        Size = UDim2.new(1, 0, 0, 6),
        Position = UDim2.new(0, 0, 0, 25),
        BackgroundColor3 = COLORS.Background,
        Parent = slider
    })
    
    local sliderFill = UI.create("Frame", {
        Size = UDim2.new(0, 0, 1, 0),
        BackgroundColor3 = COLORS.Accent,
        Parent = sliderBar
    })
    
    local sliderButton = UI.create("TextButton", {
        Size = UDim2.new(0, 16, 0, 16),
        Position = UDim2.new(0, -8, 0.5, -8),
        BackgroundColor3 = COLORS.Accent,
        Text = "",
        Parent = sliderFill
    })
    
    -- Slider functionality
    local dragging = false
    local function updateSlider(input)
        local pos = math.clamp(
            (input.Position.X - sliderBar.AbsolutePosition.X) / sliderBar.AbsoluteSize.X,
            0,
            1
        )
        
        local value = properties.min + (properties.max - properties.min) * pos
        value = math.floor(value * 10) / 10
        
        UI.animate(sliderFill, "custom", {
            Size = UDim2.new(pos, 0, 1, 0)
        })
        
        if properties.onValueChanged then
            properties.onValueChanged(value)
        end
    end
    
    sliderButton.MouseButton1Down:Connect(function()
        dragging = true
    end)
    
    Services.UserInputService.InputEnded:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 then
            dragging = false
        end
    end)
    
    Services.UserInputService.InputChanged:Connect(function(input)
        if dragging and input.UserInputType == Enum.UserInputType.MouseMovement then
            updateSlider(input)
        end
    end)
    
    return slider
end

-- Create a toggle button
function UI.createToggle(properties)
    local toggle = UI.create("Frame", {
        Size = UDim2.new(1, 0, 0, 30),
        BackgroundTransparency = 1
    })
    
    local title = UI.create("TextLabel", {
        Size = UDim2.new(1, -50, 1, 0),
        BackgroundTransparency = 1,
        Text = properties.title,
        TextXAlignment = Enum.TextXAlignment.Left,
        Parent = toggle
    })
    
    local toggleButton = UI.create("TextButton", {
        Size = UDim2.new(0, 40, 0, 20),
        Position = UDim2.new(1, -40, 0.5, -10),
        BackgroundColor3 = COLORS.Background,
        Text = "",
        Parent = toggle
    })
    
    local toggleCircle = UI.create("Frame", {
        Size = UDim2.new(0, 16, 0, 16),
        Position = UDim2.new(0, 2, 0.5, -8),
        BackgroundColor3 = COLORS.Text,
        Parent = toggleButton
    })
    
    -- Make circle round
    local corner = Instance.new("UICorner")
    corner.CornerRadius = UDim.new(1, 0)
    corner.Parent = toggleCircle
    
    local enabled = properties.default or false
    
    local function updateToggle()
        enabled = not enabled
        
        UI.animate(toggleButton, "custom", {
            BackgroundColor3 = enabled and COLORS.Accent or COLORS.Background
        })
        
        UI.animate(toggleCircle, "custom", {
            Position = enabled and UDim2.new(1, -18, 0.5, -8) or UDim2.new(0, 2, 0.5, -8)
        })
        
        if properties.onToggle then
            properties.onToggle(enabled)
        end
    end
    
    toggleButton.MouseButton1Click:Connect(updateToggle)
    
    return toggle, function() return enabled end
end

-- Home Tab Implementation
local HomeTab = {}
HomeTab.__index = HomeTab

-- Import dependencies
local PhantomHub = shared.PhantomHub or getgenv().PhantomHub
local UI = PhantomHub.UI
local Services = PhantomHub.Services
local COLORS = PhantomHub.colors
local ICONS = PhantomHub.icons

function HomeTab.new(parent)
    local self = setmetatable({}, HomeTab)
    self.parent = parent
    self.updateConnections = {}
    
    -- Create main container
    self.container = UI.create("ScrollingFrame", {
        Size = UDim2.new(1, -20, 1, -20),
        Position = UDim2.new(0, 10, 0, 10),
        BackgroundTransparency = 1,
        ScrollBarThickness = 4,
        ScrollBarImageColor3 = COLORS.Accent,
        Parent = parent
    })
    
    -- Add sections
    self:createProfileSection()
    self:createServerSection()
    self:createPlayerListSection()
    self:createTimeSection()
    
    -- Start update loops
    self:startUpdates()
    
    return self
end

function HomeTab:createProfileSection()
    local section = UI.create("Frame", {
        Size = UDim2.new(1, 0, 0, 150),
        BackgroundColor3 = COLORS.Secondary,
        Parent = self.container
    })
    
    -- Avatar
    local avatarFrame = UI.create("Frame", {
        Size = UDim2.new(0, 100, 0, 100),
        Position = UDim2.new(0, 20, 0, 25),
        BackgroundTransparency = 1,
        Parent = section
    })
    
    local avatar = UI.create("ImageLabel", {
        Size = UDim2.new(1, 0, 1, 0),
        BackgroundTransparency = 1,
        Image = Services.Players:GetUserThumbnailAsync(
            Services.Players.LocalPlayer.UserId,
            Enum.ThumbnailType.HeadShot,
            Enum.ThumbnailSize.Size420x420
        ),
        Parent = avatarFrame
    })
    
    -- Make avatar circular
    local corner = Instance.new("UICorner")
    corner.CornerRadius = UDim.new(1, 0)
    corner.Parent = avatar
    
    -- Profile Info
    local infoContainer = UI.create("Frame", {
        Size = UDim2.new(1, -140, 1, -20),
        Position = UDim2.new(0, 130, 0, 10),
        BackgroundTransparency = 1,
        Parent = section
    })
    
    -- Username
    local username = UI.create("TextLabel", {
        Size = UDim2.new(1, 0, 0, 25),
        Position = UDim2.new(0, 0, 0, 15),
        BackgroundTransparency = 1,
        Text = Services.Players.LocalPlayer.DisplayName,
        TextSize = 20,
        Font = Enum.Font.GothamBold,
        Parent = infoContainer
    })
    
    -- Account Info
    local function createInfoLabel(text, position)
        return UI.create("TextLabel", {
            Size = UDim2.new(0.33, -10, 0, 20),
            Position = position,
            BackgroundTransparency = 1,
            Text = text,
            TextSize = 14,
            Parent = infoContainer
        })
    end
    
    -- Create info labels
    local accountAge = createInfoLabel(
        "Age: " .. Services.Players.LocalPlayer.AccountAge .. " days",
        UDim2.new(0, 0, 0, 50)
    )
    
    local followers = createInfoLabel(
        "Followers: Loading...",
        UDim2.new(0.33, 5, 0, 50)
    )
    
    local following = createInfoLabel(
        "Following: Loading...",
        UDim2.new(0.66, 5, 0, 50)
    )
    
    -- Update social stats
    spawn(function()
        local success, result = pcall(function()
            local followersCount = Services.Players.LocalPlayer:GetFollowersCount()
            local followingCount = Services.Players.LocalPlayer:GetFriendsCount()
            followers.Text = "Followers: " .. PhantomHub.utility.formatNumber(followersCount)
            following.Text = "Following: " .. PhantomHub.utility.formatNumber(followingCount)
        end)
    end)
end

function HomeTab:createServerSection()
    local section = UI.create("Frame", {
        Size = UDim2.new(1, 0, 0, 120),
        Position = UDim2.new(0, 0, 0, 160),
        BackgroundColor3 = COLORS.Secondary,
        Parent = self.container
    })
    
    -- Server Info
    local function createServerStat(title, value, position)
        local stat = UI.create("Frame", {
            Size = UDim2.new(0.25, -10, 0, 50),
            Position = position,
            BackgroundTransparency = 1,
            Parent = section
        })
        
        UI.create("TextLabel", {
            Size = UDim2.new(1, 0, 0, 20),
            BackgroundTransparency = 1,
            Text = title,
            TextColor3 = COLORS.TextDark,
            TextSize = 12,
            Parent = stat
        })
        
        local valueLabel = UI.create("TextLabel", {
            Size = UDim2.new(1, 0, 0, 25),
            Position = UDim2.new(0, 0, 0, 20),
            BackgroundTransparency = 1,
            Text = value,
            TextSize = 16,
            Font = Enum.Font.GothamBold,
            Parent = stat
        })
        
        return valueLabel
    end
    
    -- Create server stats
    self.playerCount = createServerStat(
        "Players",
        "0/0",
        UDim2.new(0, 10, 0, 10)
    )
    
    self.fps = createServerStat(
        "FPS",
        "0",
        UDim2.new(0.25, 5, 0, 10)
    )
    
    self.ping = createServerStat(
        "Ping",
        "0 ms",
        UDim2.new(0.5, 5, 0, 10)
    )
    
    self.uptime = createServerStat(
        "Uptime",
        "0:00",
        UDim2.new(0.75, 5, 0, 10)
    )
    
    -- Server Controls
    local function createServerButton(title, position, callback)
        local button = UI.create("TextButton", {
            Size = UDim2.new(0.25, -10, 0, 30),
            Position = position,
            Text = title,
            Parent = section
        })
        
        UI.createRipple(button)
        button.MouseButton1Click:Connect(callback)
        return button
    end
    
    -- Create server control buttons
    createServerButton("Rejoin", UDim2.new(0, 10, 0, 70), function()
        Services.TeleportService:TeleportToPlaceInstance(
            game.PlaceId,
            game.JobId
        )
    end)
    
    createServerButton("Server Hop", UDim2.new(0.25, 5, 0, 70), function()
        local servers = {}
        local endpoint = string.format(
            "https://games.roblox.com/v1/games/%d/servers/Public?limit=100",
            game.PlaceId
        )
        
        local success, result = pcall(function()
            return game:HttpGet(endpoint)
        end)
        
        if success then
            local data = Services.HttpService:JSONDecode(result)
            for _, server in ipairs(data.data) do
                if server.playing < server.maxPlayers and server.id ~= game.JobId then
                    table.insert(servers, server.id)
                end
            end
            
            if #servers > 0 then
                Services.TeleportService:TeleportToPlaceInstance(
                    game.PlaceId,
                    servers[math.random(1, #servers)]
                )
            end
        end
    end)
    
    createServerButton("Reset", UDim2.new(0.5, 5, 0, 70), function()
        if Services.Players.LocalPlayer.Character then
            Services.Players.LocalPlayer.Character:BreakJoints()
        end
    end)
    
    createServerButton("Leave", UDim2.new(0.75, 5, 0, 70), function()
        game:Shutdown()
    end)
end
-- Continue Home Tab Implementation
function HomeTab:createPlayerListSection()
    local section = UI.create("Frame", {
        Size = UDim2.new(1, 0, 0, 300),
        Position = UDim2.new(0, 0, 0, 290),
        BackgroundColor3 = COLORS.Secondary,
        Parent = self.container
    })
    
    -- Header
    local header = UI.create("Frame", {
        Size = UDim2.new(1, 0, 0, 40),
        BackgroundTransparency = 1,
        Parent = section
    })
    
    UI.create("TextLabel", {
        Size = UDim2.new(0, 200, 1, 0),
        Position = UDim2.new(0, 10, 0, 0),
        BackgroundTransparency = 1,
        Text = "Players Online",
        TextSize = 16,
        Font = Enum.Font.GothamBold,
        TextXAlignment = Enum.TextXAlignment.Left,
        Parent = header
    })
    
    -- ESP Toggle
    local espEnabled = false
    local espFolder = Instance.new("Folder")
    espFolder.Name = "ESP"
    espFolder.Parent = game.CoreGui
    
    local espToggle, getESPState = UI.createToggle({
        title = "ESP",
        default = false,
        onToggle = function(enabled)
            espEnabled = enabled
            self:updateESP()
        end
    })
    espToggle.Position = UDim2.new(1, -150, 0, 5)
    espToggle.Size = UDim2.new(0, 140, 0, 30)
    espToggle.Parent = header
    
    -- Player List
    local playerList = UI.create("ScrollingFrame", {
        Size = UDim2.new(1, -20, 1, -50),
        Position = UDim2.new(0, 10, 0, 40),
        BackgroundTransparency = 1,
        ScrollBarThickness = 4,
        ScrollBarImageColor3 = COLORS.Accent,
        Parent = section
    })
    
    -- Add list layout
    local listLayout = Instance.new("UIListLayout")
    listLayout.Padding = UDim.new(0, 5)
    listLayout.Parent = playerList
    
    -- Player card template
    function self:createPlayerCard(player)
        local card = UI.create("Frame", {
            Size = UDim2.new(1, 0, 0, 50),
            BackgroundColor3 = COLORS.Background,
            Parent = playerList
        })
        
        -- Player avatar
        local avatar = UI.create("ImageLabel", {
            Size = UDim2.new(0, 40, 0, 40),
            Position = UDim2.new(0, 5, 0, 5),
            BackgroundTransparency = 1,
            Image = Services.Players:GetUserThumbnailAsync(
                player.UserId,
                Enum.ThumbnailType.HeadShot,
                Enum.ThumbnailSize.Size420x420
            ),
            Parent = card
        })
        
        -- Make avatar circular
        local corner = Instance.new("UICorner")
        corner.CornerRadius = UDim.new(1, 0)
        corner.Parent = avatar
        
        -- Player info
        UI.create("TextLabel", {
            Size = UDim2.new(1, -160, 0, 20),
            Position = UDim2.new(0, 55, 0, 5),
            BackgroundTransparency = 1,
            Text = player.DisplayName,
            TextXAlignment = Enum.TextXAlignment.Left,
            Font = Enum.Font.GothamBold,
            Parent = card
        })
        
        UI.create("TextLabel", {
            Size = UDim2.new(1, -160, 0, 20),
            Position = UDim2.new(0, 55, 0, 25),
            BackgroundTransparency = 1,
            Text = "@" .. player.Name,
            TextXAlignment = Enum.TextXAlignment.Left,
            TextColor3 = COLORS.TextDark,
            Parent = card
        })
        
        -- Spectate button
        local spectateBtn = UI.create("TextButton", {
            Size = UDim2.new(0, 80, 0, 30),
            Position = UDim2.new(1, -90, 0, 10),
            Text = "Spectate",
            Parent = card
        })
        
        UI.createRipple(spectateBtn)
        
        -- Spectate functionality
        local spectating = false
        spectateBtn.MouseButton1Click:Connect(function()
            spectating = not spectating
            
            if spectating then
                local camera = workspace.CurrentCamera
                camera.CameraSubject = player.Character
                spectateBtn.Text = "Stop"
                spectateBtn.BackgroundColor3 = COLORS.Error
            else
                local camera = workspace.CurrentCamera
                camera.CameraSubject = Services.Players.LocalPlayer.Character
                spectateBtn.Text = "Spectate"
                spectateBtn.BackgroundColor3 = COLORS.Secondary
            end
        end)
        
        return card
    end
    
    -- ESP System
    function self:updateESP()
        espFolder:ClearAllChildren()
        
        if not espEnabled then return end
        
        for _, player in pairs(Services.Players:GetPlayers()) do
            if player ~= Services.Players.LocalPlayer then
                -- Create ESP elements
                local esp = Instance.new("BillboardGui")
                esp.Name = player.Name .. "_ESP"
                esp.AlwaysOnTop = true
                esp.Size = UDim2.new(4, 0, 5.5, 0)
                esp.StudsOffset = Vector3.new(0, 1, 0)
                
                local frame = Instance.new("Frame")
                frame.Size = UDim2.new(1, 0, 1, 0)
                frame.BackgroundTransparency = 1
                frame.Parent = esp
                
                local nameLabel = Instance.new("TextLabel")
                nameLabel.Size = UDim2.new(1, 0, 0, 20)
                nameLabel.Position = UDim2.new(0, 0, 0, -20)
                nameLabel.BackgroundTransparency = 1
                nameLabel.Text = player.DisplayName
                nameLabel.TextColor3 = COLORS.Text
                nameLabel.TextStrokeTransparency = 0
                nameLabel.TextStrokeColor3 = Color3.new(0, 0, 0)
                nameLabel.Parent = frame
                
                local distanceLabel = Instance.new("TextLabel")
                distanceLabel.Size = UDim2.new(1, 0, 0, 20)
                distanceLabel.Position = UDim2.new(0, 0, 1, 0)
                distanceLabel.BackgroundTransparency = 1
                distanceLabel.TextColor3 = COLORS.TextDark
                distanceLabel.TextStrokeTransparency = 0
                distanceLabel.TextStrokeColor3 = Color3.new(0, 0, 0)
                distanceLabel.Parent = frame
                
                -- Update distance
                spawn(function()
                    while espEnabled and esp.Parent do
                        if player.Character and player.Character:FindFirstChild("HumanoidRootPart") and
                           Services.Players.LocalPlayer.Character and
                           Services.Players.LocalPlayer.Character:FindFirstChild("HumanoidRootPart") then
                            local distance = (player.Character.HumanoidRootPart.Position -
                                           Services.Players.LocalPlayer.Character.HumanoidRootPart.Position).Magnitude
                            distanceLabel.Text = string.format("%.1f studs", distance)
                        end
                        wait(0.1)
                    end
                end)
                
                -- Parent ESP to character
                if player.Character and player.Character:FindFirstChild("Head") then
                    esp.Parent = espFolder
                    esp.Adornee = player.Character.Head
                end
                
                -- Update ESP when character changes
                player.CharacterAdded:Connect(function(character)
                    wait(0.5) -- Wait for head to load
                    if character:FindFirstChild("Head") then
                        esp.Adornee = character.Head
                    end
                end)
            end
        end
    end
end
function HomeTab:createTimeSection()
    local section = UI.create("Frame", {
        Size = UDim2.new(1, 0, 0, 100),
        Position = UDim2.new(0, 0, 0, 600),
        BackgroundColor3 = COLORS.Secondary,
        Parent = self.container
    })
    
    -- Time zones
    local timeZones = {
        {name = "Local", offset = 0},
        {name = "UTC", offset = 0},
        {name = "EST", offset = -5},
        {name = "PST", offset = -8},
        {name = "GMT", offset = 0}
    }
    
    for i, zone in ipairs(timeZones) do
        local timeFrame = UI.create("Frame", {
            Size = UDim2.new(0.2, -10, 1, -20),
            Position = UDim2.new(0.2 * (i-1), 5, 0, 10),
            BackgroundTransparency = 1,
            Parent = section
        })
        
        UI.create("TextLabel", {
            Size = UDim2.new(1, 0, 0, 20),
            BackgroundTransparency = 1,
            Text = zone.name,
            TextColor3 = COLORS.TextDark,
            Parent = timeFrame
        })
        
        local timeLabel = UI.create("TextLabel", {
            Size = UDim2.new(1, 0, 0, 30),
            Position = UDim2.new(0, 0, 0, 30),
            BackgroundTransparency = 1,
            Text = "00:00:00",
            TextSize = 20,
            Font = Enum.Font.GothamBold,
            Parent = timeFrame
        })
        
        -- Update time
        zone.label = timeLabel
    end
    
    -- Update times
    spawn(function()
        while wait(1) do
            for _, zone in ipairs(timeZones) do
                local time
                if zone.name == "Local" then
                    time = os.date("*t")
                else
                    time = os.date("!*t")
                    time.hour = time.hour + zone.offset
                end
                zone.label.Text = string.format("%02d:%02d:%02d", time.hour, time.min, time.sec)
            end
        end
    end)
end

function HomeTab:startUpdates()
    -- Update FPS counter
    local lastIteration = tick()
    local frameCount = 0
    
    self.updateConnections.fps = Services.RunService.RenderStepped:Connect(function()
        frameCount = frameCount + 1
        local now = tick()
        
        if now - lastIteration >= 1 then
            self.fps.Text = math.floor(frameCount) .. " FPS"
            frameCount = 0
            lastIteration = now
        end
    end)
    
    -- Update player count
    self.updateConnections.players = Services.Players.PlayerAdded:Connect(function()
        self.playerCount.Text = #Services.Players:GetPlayers() .. "/" .. Services.Players.MaxPlayers
    end)
    
    Services.Players.PlayerRemoving:Connect(function()
        self.playerCount.Text = #Services.Players:GetPlayers() .. "/" .. Services.Players.MaxPlayers
    end)
    
    -- Initial player count
    self.playerCount.Text = #Services.Players:GetPlayers() .. "/" .. Services.Players.MaxPlayers
    
    -- Update ping
    spawn(function()
        while wait(1) do
            local ping = math.floor(Services.Stats:GetValue("PhysicsSender").Total * 1000)
            self.ping.Text = ping .. " ms"
        end
    end)
    
    -- Update uptime
    spawn(function()
        local startTime = tick()
        while wait(1) do
            local uptime = tick() - startTime
            self.uptime.Text = PhantomHub.utility.formatTime(uptime)
        end
    end)
    
    -- Update player list
    self.updateConnections.playerList = Services.Players.PlayerAdded:Connect(function(player)
        self:createPlayerCard(player)
    end)
    
    -- Initial player list
    for _, player in pairs(Services.Players:GetPlayers()) do
        self:createPlayerCard(player)
    end
    
    -- Update ESP
    self.updateConnections.characterAdded = Services.Players.PlayerAdded:Connect(function(player)
        player.CharacterAdded:Connect(function()
            self:updateESP()
        end)
    end)
    
    -- Create refresh button
    local refreshBtn = UI.create("TextButton", {
        Size = UDim2.new(1, 0, 0, 40),
        Position = UDim2.new(0, 0, 0, 710),
        Text = "Refresh",
        Parent = self.container
    })
    
    UI.createRipple(refreshBtn)
    
    refreshBtn.MouseButton1Click:Connect(function()
        -- Visual feedback
        UI.animate(refreshBtn, "custom", {
            BackgroundColor3 = COLORS.Accent
        })
        
        -- Refresh all data
        self:updateESP()
        
        -- Reset button color
        wait(0.2)
        UI.animate(refreshBtn, "custom", {
            BackgroundColor3 = COLORS.Secondary
        })
    end)
    
    -- Set final container size
    self.container.CanvasSize = UDim2.new(0, 0, 0, 760)
end

function HomeTab:destroy()
    -- Cleanup connections
    for _, connection in pairs(self.updateConnections) do
        connection:Disconnect()
    end
    
    -- Clear ESP
    if self.espFolder then
        self.espFolder:Destroy()
    end
end

-- Player Tab Implementation
local PlayerTab = {}
PlayerTab.__index = PlayerTab

-- Import dependencies
local PhantomHub = shared.PhantomHub or getgenv().PhantomHub
local UI = PhantomHub.UI
local Services = PhantomHub.Services
local COLORS = PhantomHub.colors

-- Constants
local DEFAULT_SETTINGS = {
    walkSpeed = 16,
    jumpPower = 50,
    hipHeight = 0,
    gravity = 196.2,
    fieldOfView = 70
}

local KEYBIND_DEFAULTS = {
    toggleFlight = Enum.KeyCode.F,
    toggleNoclip = Enum.KeyCode.V,
    speedBoost = Enum.KeyCode.LeftShift
}

function PlayerTab.new(parent)
    local self = setmetatable({}, PlayerTab)
    self.parent = parent
    self.connections = {}
    self.flying = false
    self.noclip = false
    self.infiniteJump = false
    
    -- Create main container
    self.container = UI.create("ScrollingFrame", {
        Size = UDim2.new(1, -20, 1, -20),
        Position = UDim2.new(0, 10, 0, 10),
        BackgroundTransparency = 1,
        ScrollBarThickness = 4,
        ScrollBarImageColor3 = COLORS.Accent,
        Parent = parent
    })
    
    -- Create sections
    self:createMovementSection()
    self:createPhysicsSection()
    self:createVisualsSection()
    self:createAnimationsSection()
    self:createKeybindsSection()
    
    -- Initialize features
    self:initializeFeatures()
    
    return self
end

function PlayerTab:createMovementSection()
    local section = UI.create("Frame", {
        Size = UDim2.new(1, 0, 0, 180),
        BackgroundColor3 = COLORS.Secondary,
        Parent = self.container
    })
    
    UI.create("TextLabel", {
        Size = UDim2.new(1, -20, 0, 30),
        Position = UDim2.new(0, 10, 0, 5),
        BackgroundTransparency = 1,
        Text = "Movement",
        TextSize = 16,
        Font = Enum.Font.GothamBold,
        TextXAlignment = Enum.TextXAlignment.Left,
        Parent = section
    })
    
    -- Walk Speed Slider
    self.walkSpeedSlider = UI.createSlider({
        title = "Walk Speed",
        min = 16,
        max = 200,
        default = DEFAULT_SETTINGS.walkSpeed,
        onValueChanged = function(value)
            if Services.Players.LocalPlayer.Character and 
               Services.Players.LocalPlayer.Character:FindFirstChild("Humanoid") then
                Services.Players.LocalPlayer.Character.Humanoid.WalkSpeed = value
            end
        end
    })
    self.walkSpeedSlider.Position = UDim2.new(0, 10, 0, 40)
    self.walkSpeedSlider.Parent = section
    
    -- Jump Power Slider
    self.jumpPowerSlider = UI.createSlider({
        title = "Jump Power",
        min = 50,
        max = 300,
        default = DEFAULT_SETTINGS.jumpPower,
        onValueChanged = function(value)
            if Services.Players.LocalPlayer.Character and 
               Services.Players.LocalPlayer.Character:FindFirstChild("Humanoid") then
                Services.Players.LocalPlayer.Character.Humanoid.JumpPower = value
            end
        end
    })
    self.jumpPowerSlider.Position = UDim2.new(0, 10, 0, 90)
    self.jumpPowerSlider.Parent = section
    
    -- Flight Toggle
    local flightToggle, getFlightState = UI.createToggle({
        title = "Flight",
        default = false,
        onToggle = function(enabled)
            self.flying = enabled
            self:toggleFlight(enabled)
        end
    })
    flightToggle.Position = UDim2.new(0, 10, 0, 140)
    flightToggle.Parent = section
    
    -- Noclip Toggle
    local noclipToggle, getNoclipState = UI.createToggle({
        title = "Noclip",
        default = false,
        onToggle = function(enabled)
            self.noclip = enabled
            self:toggleNoclip(enabled)
        end
    })
    noclipToggle.Position = UDim2.new(0.5, 10, 0, 140)
    noclipToggle.Parent = section
end

function PlayerTab:createPhysicsSection()
    local section = UI.create("Frame", {
        Size = UDim2.new(1, 0, 0, 140),
        Position = UDim2.new(0, 0, 0, 190),
        BackgroundColor3 = COLORS.Secondary,
        Parent = self.container
    })
    
    UI.create("TextLabel", {
        Size = UDim2.new(1, -20, 0, 30),
        Position = UDim2.new(0, 10, 0, 5),
        BackgroundTransparency = 1,
        Text = "Physics",
        TextSize = 16,
        Font = Enum.Font.GothamBold,
        TextXAlignment = Enum.TextXAlignment.Left,
        Parent = section
    })
    
    -- Hip Height Slider
    self.hipHeightSlider = UI.createSlider({
        title = "Hip Height",
        min = 0,
        max = 20,
        default = DEFAULT_SETTINGS.hipHeight,
        onValueChanged = function(value)
            if Services.Players.LocalPlayer.Character and 
               Services.Players.LocalPlayer.Character:FindFirstChild("Humanoid") then
                Services.Players.LocalPlayer.Character.Humanoid.HipHeight = value
            end
        end
    })
    self.hipHeightSlider.Position = UDim2.new(0, 10, 0, 40)
    self.hipHeightSlider.Parent = section
    
    -- Gravity Slider
    self.gravitySlider = UI.createSlider({
        title = "Gravity",
        min = 0,
        max = 196.2,
        default = DEFAULT_SETTINGS.gravity,
        onValueChanged = function(value)
            workspace.Gravity = value
        end
    })
    self.gravitySlider.Position = UDim2.new(0, 10, 0, 90)
    self.gravitySlider.Parent = section
end
function PlayerTab:createVisualsSection()
    local section = UI.create("Frame", {
        Size = UDim2.new(1, 0, 0, 190),
        Position = UDim2.new(0, 0, 0, 340),
        BackgroundColor3 = COLORS.Secondary,
        Parent = self.container
    })
    
    UI.create("TextLabel", {
        Size = UDim2.new(1, -20, 0, 30),
        Position = UDim2.new(0, 10, 0, 5),
        BackgroundTransparency = 1,
        Text = "Visuals",
        TextSize = 16,
        Font = Enum.Font.GothamBold,
        TextXAlignment = Enum.TextXAlignment.Left,
        Parent = section
    })
    
    -- Field of View Slider
    self.fovSlider = UI.createSlider({
        title = "Field of View",
        min = 70,
        max = 120,
        default = DEFAULT_SETTINGS.fieldOfView,
        onValueChanged = function(value)
            workspace.CurrentCamera.FieldOfView = value
        end
    })
    self.fovSlider.Position = UDim2.new(0, 10, 0, 40)
    self.fovSlider.Parent = section
    
    -- Third Person Toggle
    local thirdPersonToggle, getThirdPersonState = UI.createToggle({
        title = "Third Person",
        default = false,
        onToggle = function(enabled)
            Services.Players.LocalPlayer.CameraMode = enabled and 
                Enum.CameraMode.Classic or 
                Enum.CameraMode.LockFirstPerson
        end
    })
    thirdPersonToggle.Position = UDim2.new(0, 10, 0, 90)
    thirdPersonToggle.Parent = section
    
    -- Full Bright Toggle
    local fullBrightToggle, getFullBrightState = UI.createToggle({
        title = "Full Bright",
        default = false,
        onToggle = function(enabled)
            if enabled then
                self.originalBrightness = Services.Lighting.Brightness
                self.originalAmbient = Services.Lighting.Ambient
                self.originalOutdoorAmbient = Services.Lighting.OutdoorAmbient
                
                Services.Lighting.Brightness = 2
                Services.Lighting.Ambient = Color3.fromRGB(255, 255, 255)
                Services.Lighting.OutdoorAmbient = Color3.fromRGB(255, 255, 255)
            else
                Services.Lighting.Brightness = self.originalBrightness or 1
                Services.Lighting.Ambient = self.originalAmbient or Color3.fromRGB(70, 70, 70)
                Services.Lighting.OutdoorAmbient = self.originalOutdoorAmbient or Color3.fromRGB(150, 150, 150)
            end
        end
    })
    fullBrightToggle.Position = UDim2.new(0.5, 10, 0, 90)
    fullBrightToggle.Parent = section
    
    -- Zoom Distance Slider
    self.zoomSlider = UI.createSlider({
        title = "Zoom Distance",
        min = 0,
        max = 1000,
        default = Services.Players.LocalPlayer.CameraMaxZoomDistance,
        onValueChanged = function(value)
            Services.Players.LocalPlayer.CameraMaxZoomDistance = value
            Services.Players.LocalPlayer.CameraMinZoomDistance = math.min(value, 0.5)
        end
    })
    self.zoomSlider.Position = UDim2.new(0, 10, 0, 140)
    self.zoomSlider.Parent = section
end

function PlayerTab:createAnimationsSection()
    local section = UI.create("Frame", {
        Size = UDim2.new(1, 0, 0, 240),
        Position = UDim2.new(0, 0, 0, 540),
        BackgroundColor3 = COLORS.Secondary,
        Parent = self.container
    })
    
    UI.create("TextLabel", {
        Size = UDim2.new(1, -20, 0, 30),
        Position = UDim2.new(0, 10, 0, 5),
        BackgroundTransparency = 1,
        Text = "Animations",
        TextSize = 16,
        Font = Enum.Font.GothamBold,
        TextXAlignment = Enum.TextXAlignment.Left,
        Parent = section
    })
    
    -- Animation Presets
    local animations = {
        {name = "Ninja Run", id = 656117400},
        {name = "Zombie", id = 619525620},
        {name = "Toy Run", id = 782841498},
        {name = "Cartoony Run", id = 742638842},
        {name = "Stylish Run", id = 616140816},
        {name = "Mage Levitate", id = 707742142}
    }
    
    local currentAnimation = nil
    
    for i, anim in ipairs(animations) do
        local button = UI.create("TextButton", {
            Size = UDim2.new(0.5, -15, 0, 30),
            Position = UDim2.new(i % 2 == 1 and 0 or 0.5, 10, 0, 35 + math.floor((i-1)/2) * 40),
            Text = anim.name,
            Parent = section
        })
        
        UI.createRipple(button)
        
        button.MouseButton1Click:Connect(function()
            if currentAnimation then
                currentAnimation:Stop()
            end
            
            local character = Services.Players.LocalPlayer.Character
            if character and character:FindFirstChild("Humanoid") then
                local animator = character.Humanoid:FindFirstChild("Animator") or
                               Instance.new("Animator", character.Humanoid)
                               
                local animation = Instance.new("Animation")
                animation.AnimationId = "rbxassetid://" .. anim.id
                
                currentAnimation = animator:LoadAnimation(animation)
                currentAnimation:Play()
                
                -- Visual feedback
                UI.animate(button, "custom", {
                    BackgroundColor3 = COLORS.Accent
                })
                wait(0.2)
                UI.animate(button, "custom", {
                    BackgroundColor3 = COLORS.Secondary
                })
            end
        end)
    end
    
    -- Stop Animation Button
    local stopButton = UI.create("TextButton", {
        Size = UDim2.new(1, -20, 0, 30),
        Position = UDim2.new(0, 10, 0, 195),
        Text = "Stop Animation",
        BackgroundColor3 = COLORS.Error,
        Parent = section
    })
    
    UI.createRipple(stopButton)
    
    stopButton.MouseButton1Click:Connect(function()
        if currentAnimation then
            currentAnimation:Stop()
            currentAnimation = nil
        end
    end)
end
function PlayerTab:createKeybindsSection()
    local section = UI.create("Frame", {
        Size = UDim2.new(1, 0, 0, 220),
        Position = UDim2.new(0, 0, 0, 790),
        BackgroundColor3 = COLORS.Secondary,
        Parent = self.container
    })
    
    UI.create("TextLabel", {
        Size = UDim2.new(1, -20, 0, 30),
        Position = UDim2.new(0, 10, 0, 5),
        BackgroundTransparency = 1,
        Text = "Keybinds",
        TextSize = 16,
        Font = Enum.Font.GothamBold,
        TextXAlignment = Enum.TextXAlignment.Left,
        Parent = section
    })
    
    -- Keybind creator function
    local function createKeybind(title, default, position, callback)
        local frame = UI.create("Frame", {
            Size = UDim2.new(1, -20, 0, 30),
            Position = position,
            BackgroundTransparency = 1,
            Parent = section
        })
        
        UI.create("TextLabel", {
            Size = UDim2.new(0.7, 0, 1, 0),
            BackgroundTransparency = 1,
            Text = title,
            TextXAlignment = Enum.TextXAlignment.Left,
            Parent = frame
        })
        
        local bindButton = UI.create("TextButton", {
            Size = UDim2.new(0.3, -10, 1, 0),
            Position = UDim2.new(0.7, 10, 0, 0),
            Text = default.Name,
            Parent = frame
        })
        
        local currentKey = default
        local listening = false
        
        UI.createRipple(bindButton)
        
        bindButton.MouseButton1Click:Connect(function()
            if listening then return end
            
            listening = true
            bindButton.Text = "..."
            bindButton.BackgroundColor3 = COLORS.Accent
            
            local connection
            connection = Services.UserInputService.InputBegan:Connect(function(input)
                if input.UserInputType == Enum.UserInputType.Keyboard then
                    currentKey = input.KeyCode
                    bindButton.Text = currentKey.Name
                    bindButton.BackgroundColor3 = COLORS.Secondary
                    
                    if callback then
                        callback(currentKey)
                    end
                    
                    listening = false
                    connection:Disconnect()
                end
            end)
        end)
        
        return function() return currentKey end
    end
    
    -- Create keybinds
    self.getFlightKey = createKeybind(
        "Toggle Flight",
        KEYBIND_DEFAULTS.toggleFlight,
        UDim2.new(0, 10, 0, 40),
        function(key) self.flightKey = key end
    )
    
    self.getNoclipKey = createKeybind(
        "Toggle Noclip",
        KEYBIND_DEFAULTS.toggleNoclip,
        UDim2.new(0, 10, 0, 80),
        function(key) self.noclipKey = key end
    )
    
    self.getSpeedBoostKey = createKeybind(
        "Speed Boost",
        KEYBIND_DEFAULTS.speedBoost,
        UDim2.new(0, 10, 0, 120),
        function(key) self.speedBoostKey = key end
    )
    
    -- Speed Boost Multiplier
    self.speedBoostSlider = UI.createSlider({
        title = "Speed Boost Multiplier",
        min = 1,
        max = 5,
        default = 2,
        onValueChanged = function(value)
            self.speedBoostMultiplier = value
        end
    })
    self.speedBoostSlider.Position = UDim2.new(0, 10, 0, 160)
    self.speedBoostSlider.Parent = section
    
    -- Set final container size
    self.container.CanvasSize = UDim2.new(0, 0, 0, 1020)
end

function PlayerTab:initializeFeatures()
    -- Flight System
    local function updateFlight()
        if not self.flying then return end
        
        local character = Services.Players.LocalPlayer.Character
        if not character or not character:FindFirstChild("HumanoidRootPart") then return end
        
        local humanoidRootPart = character.HumanoidRootPart
        local camera = workspace.CurrentCamera
        
        local forward = camera.CFrame.LookVector
        local right = camera.CFrame.RightVector
        local up = camera.CFrame.UpVector
        
        local moveDirection = Vector3.new(0, 0, 0)
        
        -- Get movement input
        if Services.UserInputService:IsKeyDown(Enum.KeyCode.W) then
            moveDirection = moveDirection + forward
        end
        if Services.UserInputService:IsKeyDown(Enum.KeyCode.S) then
            moveDirection = moveDirection - forward
        end
        if Services.UserInputService:IsKeyDown(Enum.KeyCode.D) then
            moveDirection = moveDirection + right
        end
        if Services.UserInputService:IsKeyDown(Enum.KeyCode.A) then
            moveDirection = moveDirection - right
        end
        if Services.UserInputService:IsKeyDown(Enum.KeyCode.Space) then
            moveDirection = moveDirection + up
        end
        if Services.UserInputService:IsKeyDown(Enum.KeyCode.LeftControl) then
            moveDirection = moveDirection - up
        end
        
        -- Apply speed boost if key is held
        local speed = 50
        if Services.UserInputService:IsKeyDown(self.getSpeedBoostKey()) then
            speed = speed * (self.speedBoostMultiplier or 2)
        end
        
        -- Update velocity
        humanoidRootPart.Velocity = moveDirection.Unit * speed
    end
    
    -- Connect flight update
    self.connections.flightUpdate = Services.RunService.RenderStepped:Connect(function()
        updateFlight()
    end)
    
    -- Noclip System
    self.connections.noclipUpdate = Services.RunService.Stepped:Connect(function()
        if not self.noclip then return end
        
        local character = Services.Players.LocalPlayer.Character
        if not character then return end
        
        for _, part in pairs(character:GetDescendants()) do
            if part:IsA("BasePart") then
                part.CanCollide = false
            end
        end
    end)
    
    -- Infinite Jump
    self.connections.infiniteJump = Services.UserInputService.JumpRequest:Connect(function()
        if not self.infiniteJump then return end
        
        local character = Services.Players.LocalPlayer.Character
        if character and character:FindFirstChild("Humanoid") then
            character.Humanoid:ChangeState(Enum.HumanoidStateType.Jumping)
        end
    end)
    
    -- Keybind handler
    self.connections.keybinds = Services.UserInputService.InputBegan:Connect(function(input, gameProcessed)
        if gameProcessed then return end
        
        if input.KeyCode == self.getFlightKey() then
            self.flying = not self.flying
            self:toggleFlight(self.flying)
        elseif input.KeyCode == self.getNoclipKey() then
            self.noclip = not self.noclip
            self:toggleNoclip(self.noclip)
        end
    end)
end

function PlayerTab:toggleFlight(enabled)
    local character = Services.Players.LocalPlayer.Character
    if not character or not character:FindFirstChild("Humanoid") then return end
    
    if enabled then
        character.Humanoid.PlatformStand = true
    else
        character.Humanoid.PlatformStand = false
        character.HumanoidRootPart.Velocity = Vector3.new(0, 0, 0)
    end
end

function PlayerTab:toggleNoclip(enabled)
    -- Visual feedback handled by the noclipUpdate connection
end

function PlayerTab:destroy()
    -- Cleanup connections
    for _, connection in pairs(self.connections) do
        connection:Disconnect()
    end
    
    -- Reset character states
    self:toggleFlight(false)
    self.noclip = false
    
    -- Reset workspace gravity
    workspace.Gravity = DEFAULT_SETTINGS.gravity
    
    -- Reset camera
    workspace.CurrentCamera.FieldOfView = DEFAULT_SETTINGS.fieldOfView
end

-- Scripts Tab Implementation
local ScriptsTab = {}
ScriptsTab.__index = ScriptsTab

-- Import dependencies
local PhantomHub = shared.PhantomHub or getgenv().PhantomHub
local UI = PhantomHub.UI
local Services = PhantomHub.Services
local COLORS = PhantomHub.colors

-- Script Categories
local CATEGORIES = {
    {
        name = "Universal",
        icon = "rbxassetid://6022668898",
        scripts = {
            {
                name = "Infinite Yield",
                description = "Admin commands system",
                author = "Edge",
                tags = {"admin", "commands", "utility"},
                source = "loadstring(game:HttpGet('https://raw.githubusercontent.com/EdgeIY/infiniteyield/master/source'))()"
            },
            {
                name = "Dark Dex V4",
                description = "Advanced game explorer",
                author = "Moon",
                tags = {"explorer", "utility", "debug"},
                source = "loadstring(game:HttpGet('https://raw.githubusercontent.com/Babyhamsta/RBLX_Scripts/main/Universal/BypassedDarkDexV4.lua'))()"
            },
            -- Add more universal scripts here
        }
    },
    {
        name = "Game Specific",
        icon = "rbxassetid://6023426926",
        scripts = {
            -- Scripts will be populated based on current game
        }
    },
    {
        name = "Utilities",
        icon = "rbxassetid://6022668883",
        scripts = {
            {
                name = "Remote Spy",
                description = "Monitor remote events and functions",
                author = "Upbolt",
                tags = {"debug", "utility", "development"},
                source = "loadstring(game:HttpGet('https://raw.githubusercontent.com/Upbolt/Hydroxide/revision/init.lua'))()"
            },
            -- Add more utility scripts
        }
    },
    {
        name = "Favorites",
        icon = "rbxassetid://6031075929",
        scripts = {}  -- Will be populated from saved favorites
    }
}

function ScriptsTab.new(parent)
    local self = setmetatable({}, ScriptsTab)
    self.parent = parent
    self.favorites = {}
    self.loadedGameScripts = false
    
    -- Create main container
    self.container = UI.create("Frame", {
        Size = UDim2.new(1, -20, 1, -20),
        Position = UDim2.new(0, 10, 0, 10),
        BackgroundTransparency = 1,
        Parent = parent
    })
    
    -- Create search bar
    self:createSearchBar()
    
    -- Create script list
    self:createScriptList()
    
    -- Load favorites from save
    self:loadFavorites()
    
    -- Load game-specific scripts
    self:loadGameScripts()
    
    return self
end

function ScriptsTab:createSearchBar()
    local searchFrame = UI.create("Frame", {
        Size = UDim2.new(1, 0, 0, 40),
        BackgroundColor3 = COLORS.Secondary,
        Parent = self.container
    })
    
    local searchBox = UI.create("TextBox", {
        Size = UDim2.new(1, -20, 1, -10),
        Position = UDim2.new(0, 10, 0, 5),
        BackgroundColor3 = COLORS.Background,
        PlaceholderText = "Search scripts...",
        Text = "",
        TextXAlignment = Enum.TextXAlignment.Left,
        Parent = searchFrame
    })
    
    -- Add search icon
    local searchIcon = UI.create("ImageLabel", {
        Size = UDim2.new(0, 16, 0, 16),
        Position = UDim2.new(1, -26, 0.5, -8),
        BackgroundTransparency = 1,
        Image = "rbxassetid://6031154871",
        ImageColor3 = COLORS.TextDark,
        Parent = searchBox
    })
    
    -- Search functionality
    local function updateSearch()
        local query = searchBox.Text:lower()
        for _, category in ipairs(self.categories) do
            local visibleCount = 0
            for _, scriptCard in ipairs(category.scriptCards) do
                local script = scriptCard.scriptData
                local visible = script.name:lower():find(query) or
                              script.description:lower():find(query) or
                              script.author:lower():find(query) or
                              table.concat(script.tags, " "):lower():find(query)
                              
                scriptCard.Visible = visible
                if visible then
                    scriptCard.Position = UDim2.new(0, 10, 0, 50 + visibleCount * 110)
                    visibleCount = visibleCount + 1
                end
            end
            category.frame.Size = UDim2.new(1, 0, 0, math.max(60, visibleCount * 110 + 50))
        end
        self:updateLayout()
    end
    
    searchBox:GetPropertyChangedSignal("Text"):Connect(updateSearch)
end

function ScriptsTab:createScriptList()
    self.scriptContainer = UI.create("ScrollingFrame", {
        Size = UDim2.new(1, 0, 1, -50),
        Position = UDim2.new(0, 0, 0, 50),
        BackgroundTransparency = 1,
        ScrollBarThickness = 4,
        ScrollBarImageColor3 = COLORS.Accent,
        Parent = self.container
    })
    
    -- Categories
    self.categories = {}
    local yOffset = 10
    
    for _, categoryData in ipairs(CATEGORIES) do
        local category = self:createCategory(categoryData, yOffset)
        table.insert(self.categories, category)
        yOffset = yOffset + 60 + (#categoryData.scripts * 110)
    end
    
    self.scriptContainer.CanvasSize = UDim2.new(0, 0, 0, yOffset)
end
function ScriptsTab:createCategory(categoryData, yOffset)
    local category = {
        name = categoryData.name,
        scripts = categoryData.scripts,
        scriptCards = {}
    }
    
    -- Create category frame
    category.frame = UI.create("Frame", {
        Size = UDim2.new(1, -20, 0, #categoryData.scripts * 110 + 50),
        Position = UDim2.new(0, 10, 0, yOffset),
        BackgroundColor3 = COLORS.Secondary,
        Parent = self.scriptContainer
    })
    
    -- Category header
    local header = UI.create("Frame", {
        Size = UDim2.new(1, 0, 0, 40),
        BackgroundTransparency = 1,
        Parent = category.frame
    })
    
    -- Category icon
    UI.create("ImageLabel", {
        Size = UDim2.new(0, 24, 0, 24),
        Position = UDim2.new(0, 10, 0, 8),
        BackgroundTransparency = 1,
        Image = categoryData.icon,
        ImageColor3 = COLORS.Accent,
        Parent = header
    })
    
    -- Category name
    UI.create("TextLabel", {
        Size = UDim2.new(1, -50, 1, 0),
        Position = UDim2.new(0, 40, 0, 0),
        BackgroundTransparency = 1,
        Text = categoryData.name,
        TextSize = 16,
        Font = Enum.Font.GothamBold,
        TextXAlignment = Enum.TextXAlignment.Left,
        Parent = header
    })
    
    -- Create script cards
    for i, scriptData in ipairs(categoryData.scripts) do
        local card = self:createScriptCard(scriptData)
        card.Position = UDim2.new(0, 10, 0, 50 + (i-1) * 110)
        card.Parent = category.frame
        table.insert(category.scriptCards, card)
    end
    
    return category
end

function ScriptsTab:createScriptCard(scriptData)
    local card = UI.create("Frame", {
        Size = UDim2.new(1, -20, 0, 100),
        BackgroundColor3 = COLORS.Background
    })
    
    -- Store script data
    card.scriptData = scriptData
    
    -- Script title
    UI.create("TextLabel", {
        Size = UDim2.new(1, -120, 0, 25),
        Position = UDim2.new(0, 10, 0, 5),
        BackgroundTransparency = 1,
        Text = scriptData.name,
        TextSize = 16,
        Font = Enum.Font.GothamBold,
        TextXAlignment = Enum.TextXAlignment.Left,
        Parent = card
    })
    
    -- Author
    UI.create("TextLabel", {
        Size = UDim2.new(0, 200, 0, 20),
        Position = UDim2.new(0, 10, 0, 30),
        BackgroundTransparency = 1,
        Text = "by " .. scriptData.author,
        TextSize = 14,
        TextColor3 = COLORS.TextDark,
        TextXAlignment = Enum.TextXAlignment.Left,
        Parent = card
    })
    
    -- Description
    UI.create("TextLabel", {
        Size = UDim2.new(1, -20, 0, 20),
        Position = UDim2.new(0, 10, 0, 50),
        BackgroundTransparency = 1,
        Text = scriptData.description,
        TextSize = 14,
        TextColor3 = COLORS.TextDark,
        TextXAlignment = Enum.TextXAlignment.Left,
        Parent = card
    })
    
    -- Tags
    local tagContainer = UI.create("Frame", {
        Size = UDim2.new(1, -20, 0, 20),
        Position = UDim2.new(0, 10, 0, 75),
        BackgroundTransparency = 1,
        Parent = card
    })
    
    for i, tag in ipairs(scriptData.tags) do
        local tagLabel = UI.create("TextLabel", {
            Size = UDim2.new(0, 0, 1, 0), -- Width will be set after measuring text
            Position = UDim2.new(0, i == 1 and 0 or 10, 0, 0),
            BackgroundColor3 = COLORS.Accent,
            BackgroundTransparency = 0.8,
            Text = tag,
            TextSize = 12,
            Parent = tagContainer
        })
        
        -- Add padding
        tagLabel.Size = UDim2.new(0, tagLabel.TextBounds.X + 20, 1, 0)
        if i > 1 then
            tagLabel.Position = UDim2.new(0, tagContainer:FindFirstChild("Tag" .. (i-1)).Position.X.Offset + 
                                           tagContainer:FindFirstChild("Tag" .. (i-1)).Size.X.Offset + 10, 0, 0)
        end
        tagLabel.Name = "Tag" .. i
    end
    
    -- Execute button
    local executeBtn = UI.create("TextButton", {
        Size = UDim2.new(0, 80, 0, 30),
        Position = UDim2.new(1, -90, 0, 10),
        Text = "Execute",
        Parent = card
    })
    
    UI.createRipple(executeBtn)
    
    executeBtn.MouseButton1Click:Connect(function()
        self:executeScript(scriptData)
    end)
    
    -- Favorite button
    local favoriteBtn = UI.create("ImageButton", {
        Size = UDim2.new(0, 24, 0, 24),
        Position = UDim2.new(1, -90, 0, 50),
        BackgroundTransparency = 1,
        Image = "rbxassetid://6031075929",
        ImageColor3 = self:isFavorite(scriptData) and COLORS.Warning or COLORS.TextDark,
        Parent = card
    })
    
    favoriteBtn.MouseButton1Click:Connect(function()
        self:toggleFavorite(scriptData)
        favoriteBtn.ImageColor3 = self:isFavorite(scriptData) and COLORS.Warning or COLORS.TextDark
    end)
    
    return card
end
function ScriptsTab:executeScript(scriptData)
    -- Create execution notification
    local notification = UI.create("Frame", {
        Size = UDim2.new(0, 200, 0, 40),
        Position = UDim2.new(1, 20, 0, 20),
        BackgroundColor3 = COLORS.Secondary,
        Parent = self.container
    })
    
    local status = UI.create("TextLabel", {
        Size = UDim2.new(1, -20, 1, 0),
        Position = UDim2.new(0, 10, 0, 0),
        BackgroundTransparency = 1,
        Text = "Executing " .. scriptData.name .. "...",
        TextColor3 = COLORS.TextDark,
        Parent = notification
    })
    
    -- Animate notification in
    UI.animate(notification, "custom", {
        Position = UDim2.new(1, -220, 0, 20)
    })
    
    -- Execute the script
    local success, error = pcall(function()
        loadstring(scriptData.source)()
    end)
    
    -- Update notification based on result
    if success then
        status.Text = scriptData.name .. " executed successfully!"
        status.TextColor3 = COLORS.Success
    else
        status.Text = "Error executing " .. scriptData.name
        status.TextColor3 = COLORS.Error
        
        -- Log error to debug console
        warn("Script Execution Error:", error)
    end
    
    -- Remove notification after delay
    wait(2)
    UI.animate(notification, "custom", {
        Position = UDim2.new(1, 20, 0, 20)
    }).Completed:Connect(function()
        notification:Destroy()
    end)
end

function ScriptsTab:toggleFavorite(scriptData)
    local index = self:isFavorite(scriptData)
    if index then
        table.remove(self.favorites, index)
        -- Remove from favorites category
        for _, card in ipairs(self.categories[4].scriptCards) do
            if card.scriptData == scriptData then
                card:Destroy()
                table.remove(self.categories[4].scriptCards, table.find(self.categories[4].scriptCards, card))
                break
            end
        end
    else
        table.insert(self.favorites, scriptData)
        -- Add to favorites category
        local card = self:createScriptCard(scriptData)
        card.Position = UDim2.new(0, 10, 0, 50 + #self.categories[4].scriptCards * 110)
        card.Parent = self.categories[4].frame
        table.insert(self.categories[4].scriptCards, card)
    end
    
    -- Update favorites category size
    self.categories[4].frame.Size = UDim2.new(1, -20, 0, #self.favorites * 110 + 50)
    
    -- Update layout
    self:updateLayout()
    
    -- Save favorites
    self:saveFavorites()
end

function ScriptsTab:isFavorite(scriptData)
    for i, favorite in ipairs(self.favorites) do
        if favorite.name == scriptData.name then
            return i
        end
    end
    return false
end

function ScriptsTab:saveFavorites()
    local saveData = {}
    for _, favorite in ipairs(self.favorites) do
        table.insert(saveData, {
            name = favorite.name,
            description = favorite.description,
            author = favorite.author,
            tags = favorite.tags,
            source = favorite.source
        })
    end
    
    local success, error = pcall(function()
        writefile("PhantomHub/favorites.json", Services.HttpService:JSONEncode(saveData))
    end)
    
    if not success then
        warn("Failed to save favorites:", error)
    end
end

function ScriptsTab:loadFavorites()
    local success, data = pcall(function()
        return readfile("PhantomHub/favorites.json")
    end)
    
    if success then
        local decoded = Services.HttpService:JSONDecode(data)
        self.favorites = decoded
        
        -- Add favorites to category
        for _, favorite in ipairs(self.favorites) do
            local card = self:createScriptCard(favorite)
            card.Position = UDim2.new(0, 10, 0, 50 + #self.categories[4].scriptCards * 110)
            card.Parent = self.categories[4].frame
            table.insert(self.categories[4].scriptCards, card)
        end
        
        -- Update favorites category size
        self.categories[4].frame.Size = UDim2.new(1, -20, 0, #self.favorites * 110 + 50)
        self:updateLayout()
    end
end

function ScriptsTab:loadGameScripts()
    if self.loadedGameScripts then return end
    
    local gameId = game.PlaceId
    local success, scripts = pcall(function()
        return game:HttpGet("https://phantom.hub/api/scripts/" .. gameId)
    end)
    
    if success then
        -- Parse and add game-specific scripts
        local gameScripts = Services.HttpService:JSONDecode(scripts)
        for _, script in ipairs(gameScripts) do
            table.insert(CATEGORIES[2].scripts, script)
        end
        
        -- Refresh game-specific category
        self:refreshCategory(2)
    end
    
    self.loadedGameScripts = true
end

function ScriptsTab:refreshCategory(categoryIndex)
    local category = self.categories[categoryIndex]
    
    -- Clear existing script cards
    for _, card in ipairs(category.scriptCards) do
        card:Destroy()
    end
    category.scriptCards = {}
    
    -- Recreate script cards
    for i, scriptData in ipairs(CATEGORIES[categoryIndex].scripts) do
        local card = self:createScriptCard(scriptData)
        card.Position = UDim2.new(0, 10, 0, 50 + (i-1) * 110)
        card.Parent = category.frame
        table.insert(category.scriptCards, card)
    end
    
    -- Update category size
    category.frame.Size = UDim2.new(1, -20, 0, #CATEGORIES[categoryIndex].scripts * 110 + 50)
    self:updateLayout()
end

function ScriptsTab:updateLayout()
    local yOffset = 10
    for _, category in ipairs(self.categories) do
        category.frame.Position = UDim2.new(0, 10, 0, yOffset)
        yOffset = yOffset + category.frame.Size.Y.Offset + 10
    end
    self.scriptContainer.CanvasSize = UDim2.new(0, 0, 0, yOffset)
end

function ScriptsTab:destroy()
    self:saveFavorites()
end

-- Settings Tab Implementation
local SettingsTab = {}
SettingsTab.__index = SettingsTab

-- Import dependencies
local PhantomHub = shared.PhantomHub or getgenv().PhantomHub
local UI = PhantomHub.UI
local Services = PhantomHub.Services
local COLORS = PhantomHub.colors

-- Preset themes
local THEMES = {
    Default = {
        name = "Default",
        colors = {
            Background = Color3.fromRGB(25, 25, 35),
            Secondary = Color3.fromRGB(30, 30, 45),
            Accent = Color3.fromRGB(90, 70, 255),
            Text = Color3.fromRGB(255, 255, 255),
            TextDark = Color3.fromRGB(200, 200, 200)
        },
        preview = "rbxassetid://6031086173"
    },
    Dark = {
        name = "Dark",
        colors = {
            Background = Color3.fromRGB(15, 15, 20),
            Secondary = Color3.fromRGB(20, 20, 25),
            Accent = Color3.fromRGB(65, 105, 225),
            Text = Color3.fromRGB(255, 255, 255),
            TextDark = Color3.fromRGB(180, 180, 180)
        },
        preview = "rbxassetid://6031086174"
    },
    Light = {
        name = "Light",
        colors = {
            Background = Color3.fromRGB(240, 240, 245),
            Secondary = Color3.fromRGB(250, 250, 255),
            Accent = Color3.fromRGB(90, 70, 255),
            Text = Color3.fromRGB(30, 30, 35),
            TextDark = Color3.fromRGB(70, 70, 75)
        },
        preview = "rbxassetid://6031086175"
    },
    Midnight = {
        name = "Midnight",
        colors = {
            Background = Color3.fromRGB(10, 10, 15),
            Secondary = Color3.fromRGB(15, 15, 20),
            Accent = Color3.fromRGB(138, 43, 226),
            Text = Color3.fromRGB(255, 255, 255),
            TextDark = Color3.fromRGB(180, 180, 180)
        },
        preview = "rbxassetid://6031086176"
    }
}

-- Background presets
local BACKGROUNDS = {
    {
        name = "Abstract",
        id = "rbxassetid://6031086177",
        preview = "rbxassetid://6031086178"
    },
    {
        name = "Geometric",
        id = "rbxassetid://6031086179",
        preview = "rbxassetid://6031086180"
    },
    {
        name = "Particles",
        id = "rbxassetid://6031086181",
        preview = "rbxassetid://6031086182"
    },
    {
        name = "Waves",
        id = "rbxassetid://6031086183",
        preview = "rbxassetid://6031086184"
    }
}

function SettingsTab.new(parent)
    local self = setmetatable({}, SettingsTab)
    self.parent = parent
    
    -- Create main container
    self.container = UI.create("ScrollingFrame", {
        Size = UDim2.new(1, -20, 1, -20),
        Position = UDim2.new(0, 10, 0, 10),
        BackgroundTransparency = 1,
        ScrollBarThickness = 4,
        ScrollBarImageColor3 = COLORS.Accent,
        Parent = parent
    })
    
    -- Create sections
    self:createThemeSection()
    self:createBackgroundSection()
    self:createKeybindsSection()
    self:createPerformanceSection()
    self:createMiscSection()
    
    -- Load saved settings
    self:loadSettings()
    
    return self
end

function SettingsTab:createThemeSection()
    local section = UI.create("Frame", {
        Size = UDim2.new(1, 0, 0, 280),
        BackgroundColor3 = COLORS.Secondary,
        Parent = self.container
    })
    
    -- Section header
    UI.create("TextLabel", {
        Size = UDim2.new(1, -20, 0, 30),
        Position = UDim2.new(0, 10, 0, 5),
        BackgroundTransparency = 1,
        Text = "Theme",
        TextSize = 16,
        Font = Enum.Font.GothamBold,
        TextXAlignment = Enum.TextXAlignment.Left,
        Parent = section
    })
    
    -- Theme grid
    local grid = UI.create("Frame", {
        Size = UDim2.new(1, -20, 0, 200),
        Position = UDim2.new(0, 10, 0, 40),
        BackgroundTransparency = 1,
        Parent = section
    })
    
    -- Create theme cards
    local themeSize = UDim2.new(0.25, -10, 1, 0)
    local i = 0
    for _, theme in pairs(THEMES) do
        local card = UI.create("Frame", {
            Size = themeSize,
            Position = UDim2.new(0.25 * i, i == 0 and 0 or 10, 0, 0),
            BackgroundColor3 = theme.colors.Secondary,
            Parent = grid
        })
        
        -- Preview image
        UI.create("ImageLabel", {
            Size = UDim2.new(1, 0, 0.7, 0),
            BackgroundTransparency = 1,
            Image = theme.preview,
            Parent = card
        })
        
        -- Theme name
        UI.create("TextLabel", {
            Size = UDim2.new(1, 0, 0.3, 0),
            Position = UDim2.new(0, 0, 0.7, 0),
            BackgroundTransparency = 1,
            Text = theme.name,
            TextColor3 = theme.colors.Text,
            Parent = card
        })
        
        -- Selection indicator
        local indicator = UI.create("Frame", {
            Size = UDim2.new(1, 4, 1, 4),
            Position = UDim2.new(0, -2, 0, -2),
            BackgroundColor3 = COLORS.Accent,
            BackgroundTransparency = theme.name == "Default" and 0 or 1,
            Parent = card
        })
        
        -- Click handler
        card.InputBegan:Connect(function(input)
            if input.UserInputType == Enum.UserInputType.MouseButton1 then
                self:applyTheme(theme)
                
                -- Update indicators
                for _, otherCard in ipairs(grid:GetChildren()) do
                    otherCard:FindFirstChild("SelectionIndicator").BackgroundTransparency = 1
                end
                indicator.BackgroundTransparency = 0
            end
        end)
        
        i = i + 1
    end
    function SettingsTab:createBackgroundSection()
    local section = UI.create("Frame", {
        Size = UDim2.new(1, 0, 0, 320),
        Position = UDim2.new(0, 0, 0, 290),
        BackgroundColor3 = COLORS.Secondary,
        Parent = self.container
    })
    
    -- Section header
    UI.create("TextLabel", {
        Size = UDim2.new(1, -20, 0, 30),
        Position = UDim2.new(0, 10, 0, 5),
        BackgroundTransparency = 1,
        Text = "Background",
        TextSize = 16,
        Font = Enum.Font.GothamBold,
        TextXAlignment = Enum.TextXAlignment.Left,
        Parent = section
    })
    
    -- Background preview
    self.backgroundPreview = UI.create("ImageLabel", {
        Size = UDim2.new(1, -20, 0, 150),
        Position = UDim2.new(0, 10, 0, 40),
        BackgroundColor3 = COLORS.Background,
        Image = BACKGROUNDS[1].id,
        Parent = section
    })
    
    -- Background options
    local optionsContainer = UI.create("Frame", {
        Size = UDim2.new(1, -20, 0, 100),
        Position = UDim2.new(0, 10, 0, 200),
        BackgroundTransparency = 1,
        Parent = section
    })
    
    -- Background selector
    for i, bg in ipairs(BACKGROUNDS) do
        local thumb = UI.create("ImageButton", {
            Size = UDim2.new(0.25, -10, 1, 0),
            Position = UDim2.new(0.25 * (i-1), i == 1 and 0 or 10, 0, 0),
            BackgroundColor3 = COLORS.Background,
            Image = bg.preview,
            Parent = optionsContainer
        })
        
        -- Selection indicator
        local indicator = UI.create("Frame", {
            Size = UDim2.new(1, 4, 1, 4),
            Position = UDim2.new(0, -2, 0, -2),
            BackgroundColor3 = COLORS.Accent,
            BackgroundTransparency = i == 1 and 0 or 1,
            Parent = thumb
        })
        
        thumb.MouseButton1Click:Connect(function()
            self:setBackground(bg.id)
            
            -- Update indicators
            for _, other in ipairs(optionsContainer:GetChildren()) do
                if other:FindFirstChild("SelectionIndicator") then
                    other.SelectionIndicator.BackgroundTransparency = 1
                end
            end
            indicator.BackgroundTransparency = 0
        end)
    end
    
    -- Custom background button
    local customButton = UI.create("TextButton", {
        Size = UDim2.new(1, -20, 0, 30),
        Position = UDim2.new(0, 10, 0, 280),
        Text = "Custom Background",
        Parent = section
    })
    
    UI.createRipple(customButton)
    
    customButton.MouseButton1Click:Connect(function()
        -- Create input dialog
        local dialog = UI.createDialog({
            title = "Custom Background",
            message = "Enter image URL or asset ID:",
            placeholder = "rbxassetid:// or https://",
            buttons = {
                {
                    text = "Apply",
                    callback = function(input)
                        self:setBackground(input)
                    end
                },
                {
                    text = "Cancel"
                }
            }
        })
        dialog.Parent = self.parent.Parent
    end)
end

function SettingsTab:createKeybindsSection()
    local section = UI.create("Frame", {
        Size = UDim2.new(1, 0, 0, 200),
        Position = UDim2.new(0, 0, 0, 620),
        BackgroundColor3 = COLORS.Secondary,
        Parent = self.container
    })
    
    -- Section header
    UI.create("TextLabel", {
        Size = UDim2.new(1, -20, 0, 30),
        Position = UDim2.new(0, 10, 0, 5),
        BackgroundTransparency = 1,
        Text = "Keybinds",
        TextSize = 16,
        Font = Enum.Font.GothamBold,
        TextXAlignment = Enum.TextXAlignment.Left,
        Parent = section
    })
    
    -- Keybind settings
    local keybinds = {
        {name = "Toggle GUI", default = Enum.KeyCode.RightControl},
        {name = "Quick Reset", default = Enum.KeyCode.R},
        {name = "Toggle ESP", default = Enum.KeyCode.E},
        {name = "Toggle Flight", default = Enum.KeyCode.F},
        {name = "Toggle Noclip", default = Enum.KeyCode.V}
    }
    
    for i, bind in ipairs(keybinds) do
        local frame = UI.create("Frame", {
            Size = UDim2.new(1, -20, 0, 30),
            Position = UDim2.new(0, 10, 0, 35 + (i-1) * 35),
            BackgroundTransparency = 1,
            Parent = section
        })
        
        -- Keybind name
        UI.create("TextLabel", {
            Size = UDim2.new(0.7, 0, 1, 0),
            BackgroundTransparency = 1,
            Text = bind.name,
            TextXAlignment = Enum.TextXAlignment.Left,
            Parent = frame
        })
        
        -- Keybind button
        local button = UI.create("TextButton", {
            Size = UDim2.new(0.3, -10, 1, 0),
            Position = UDim2.new(0.7, 10, 0, 0),
            Text = bind.default.Name,
            Parent = frame
        })
        
        -- Keybind logic
        local listening = false
        
        button.MouseButton1Click:Connect(function()
            if listening then return end
            
            listening = true
            button.Text = "..."
            button.BackgroundColor3 = COLORS.Accent
            
            local connection
            connection = Services.UserInputService.InputBegan:Connect(function(input)
                if input.UserInputType == Enum.UserInputType.Keyboard then
                    local key = input.KeyCode
                    button.Text = key.Name
                    button.BackgroundColor3 = COLORS.Secondary
                    
                    -- Save keybind
                    self:updateKeybind(bind.name, key)
                    
                    listening = false
                    connection:Disconnect()
                end
            end)
        end)
    end
end
function SettingsTab:createPerformanceSection()
    local section = UI.create("Frame", {
        Size = UDim2.new(1, 0, 0, 240),
        Position = UDim2.new(0, 0, 0, 830),
        BackgroundColor3 = COLORS.Secondary,
        Parent = self.container
    })
    
    -- Section header
    UI.create("TextLabel", {
        Size = UDim2.new(1, -20, 0, 30),
        Position = UDim2.new(0, 10, 0, 5),
        BackgroundTransparency = 1,
        Text = "Performance",
        TextSize = 16,
        Font = Enum.Font.GothamBold,
        TextXAlignment = Enum.TextXAlignment.Left,
        Parent = section
    })
    
    -- FPS Cap Slider
    self.fpsSlider = UI.createSlider({
        title = "FPS Cap",
        min = 30,
        max = 360,
        default = 60,
        onValueChanged = function(value)
            setfpscap(value)
        end
    })
    self.fpsSlider.Position = UDim2.new(0, 10, 0, 40)
    self.fpsSlider.Parent = section
    
    -- Graphics Quality
    self.graphicsSlider = UI.createSlider({
        title = "Graphics Quality",
        min = 1,
        max = 10,
        default = settings().Rendering.QualityLevel,
        onValueChanged = function(value)
            settings().Rendering.QualityLevel = value
        end
    })
    self.graphicsSlider.Position = UDim2.new(0, 10, 0, 90)
    self.graphicsSlider.Parent = section
    
    -- Performance Toggles
    local toggles = {
        {
            name = "Disable Particles",
            callback = function(enabled)
                for _, v in ipairs(game:GetDescendants()) do
                    if v:IsA("ParticleEmitter") or v:IsA("Smoke") or v:IsA("Fire") or v:IsA("Sparkles") then
                        v.Enabled = not enabled
                    end
                end
            end
        },
        {
            name = "Disable Shadows",
            callback = function(enabled)
                settings().Rendering.QualityLevel = enabled and 1 or self.graphicsSlider:getValue()
                game:GetService("Lighting").GlobalShadows = not enabled
            end
        },
        {
            name = "Low Water Graphics",
            callback = function(enabled)
                workspace.Terrain.WaterWaveSize = enabled and 0 or 0.15
                workspace.Terrain.WaterWaveSpeed = enabled and 0 or 10
                workspace.Terrain.WaterReflectance = enabled and 0 or 1
                workspace.Terrain.WaterTransparency = enabled and 1 or 0.5
            end
        }
    }
    
    for i, toggle in ipairs(toggles) do
        local toggleBtn = UI.createToggle({
            title = toggle.name,
            default = false,
            onToggle = toggle.callback
        })
        toggleBtn.Position = UDim2.new(0, 10, 0, 140 + (i-1) * 40)
        toggleBtn.Parent = section
    end
end

function SettingsTab:createMiscSection()
    local section = UI.create("Frame", {
        Size = UDim2.new(1, 0, 0, 180),
        Position = UDim2.new(0, 0, 0, 1080),
        BackgroundColor3 = COLORS.Secondary,
        Parent = self.container
    })
    
    -- Section header
    UI.create("TextLabel", {
        Size = UDim2.new(1, -20, 0, 30),
        Position = UDim2.new(0, 10, 0, 5),
        BackgroundTransparency = 1,
        Text = "Miscellaneous",
        TextSize = 16,
        Font = Enum.Font.GothamBold,
        TextXAlignment = Enum.TextXAlignment.Left,
        Parent = section
    })
    
    -- Auto-Save Toggle
    local autoSave = UI.createToggle({
        title = "Auto-Save Settings",
        default = true,
        onToggle = function(enabled)
            self.autoSave = enabled
        end
    })
    autoSave.Position = UDim2.new(0, 10, 0, 40)
    autoSave.Parent = section
    
    -- Reset Settings Button
    local resetBtn = UI.create("TextButton", {
        Size = UDim2.new(1, -20, 0, 30),
        Position = UDim2.new(0, 10, 0, 90),
        Text = "Reset All Settings",
        BackgroundColor3 = COLORS.Error,
        Parent = section
    })
    
    UI.createRipple(resetBtn)
    
    resetBtn.MouseButton1Click:Connect(function()
        -- Create confirmation dialog
        local dialog = UI.createDialog({
            title = "Reset Settings",
            message = "Are you sure you want to reset all settings to default?",
            buttons = {
                {
                    text = "Reset",
                    color = COLORS.Error,
                    callback = function()
                        self:resetSettings()
                    end
                },
                {
                    text = "Cancel"
                }
            }
        })
        dialog.Parent = self.parent.Parent
    end)
    
    -- Version Info
    UI.create("TextLabel", {
        Size = UDim2.new(1, -20, 0, 20),
        Position = UDim2.new(0, 10, 0, 140),
        BackgroundTransparency = 1,
        Text = "Phantom Hub v4.0",
        TextColor3 = COLORS.TextDark,
        TextXAlignment = Enum.TextXAlignment.Left,
        Parent = section
    })
    
    -- Set final container size
    self.container.CanvasSize = UDim2.new(0, 0, 0, 1270)
end

function SettingsTab:applyTheme(theme)
    for name, color in pairs(theme.colors) do
        COLORS[name] = color
    end
    
    -- Trigger theme update event
    if PhantomHub.onThemeChanged then
        PhantomHub.onThemeChanged(theme)
    end
    
    if self.autoSave then
        self:saveSettings()
    end
end

function SettingsTab:setBackground(bgImage)
    self.backgroundPreview.Image = bgImage
    PhantomHub.background = bgImage
    
    if self.autoSave then
        self:saveSettings()
    end
end

function SettingsTab:updateKeybind(name, key)
    PhantomHub.keybinds[name] = key
    
    if self.autoSave then
        self:saveSettings()
    end
end

function SettingsTab:saveSettings()
    local settings = {
        theme = COLORS,
        background = PhantomHub.background,
        keybinds = PhantomHub.keybinds,
        autoSave = self.autoSave,
        fpsCap = self.fpsSlider:getValue(),
        graphicsQuality = self.graphicsSlider:getValue()
    }
    
    writefile("PhantomHub/settings.json", Services.HttpService:JSONEncode(settings))
end

function SettingsTab:loadSettings()
    local success, settings = pcall(function()
        return Services.HttpService:JSONDecode(readfile("PhantomHub/settings.json"))
    end)
    
    if success then
        -- Apply saved settings
        if settings.theme then
            for name, color in pairs(settings.theme) do
                COLORS[name] = color
            end
        end
        
        if settings.background then
            self:setBackground(settings.background)
        end
        
        if settings.keybinds then
            PhantomHub.keybinds = settings.keybinds
        end
        
        if settings.autoSave ~= nil then
            self.autoSave = settings.autoSave
        end
        
        if settings.fpsCap then
            self.fpsSlider:setValue(settings.fpsCap)
        end
        
        if settings.graphicsQuality then
            self.graphicsSlider:setValue(settings.graphicsQuality)
        end
    end
end

function SettingsTab:resetSettings()
    -- Reset to default theme
    self:applyTheme(THEMES.Default)
    
    -- Reset background
    self:setBackground(BACKGROUNDS[1].id)
    
    -- Reset keybinds
    PhantomHub.keybinds = {
        ["Toggle GUI"] = Enum.KeyCode.RightControl,
        ["Quick Reset"] = Enum.KeyCode.R,
        ["Toggle ESP"] = Enum.KeyCode.E,
        ["Toggle Flight"] = Enum.KeyCode.F,
        ["Toggle Noclip"] = Enum.KeyCode.V
    }
    
    -- Reset performance settings
    setfpscap(60)
    settings().Rendering.QualityLevel = 7
    
    -- Save reset settings
    self:saveSettings()
end

function SettingsTab:destroy()
    if self.autoSave then
        self:saveSettings()
    end
end

-- Debug Tab Implementation
local DebugTab = {}
DebugTab.__index = DebugTab

-- Import dependencies
local PhantomHub = shared.PhantomHub or getgenv().PhantomHub
local UI = PhantomHub.UI
local Services = PhantomHub.Services
local COLORS = PhantomHub.colors

-- Constants
local LOG_TYPES = {
    INFO = {
        color = Color3.fromRGB(75, 150, 255),
        icon = "rbxassetid://6031071053"
    },
    WARNING = {
        color = Color3.fromRGB(255, 150, 50),
        icon = "rbxassetid://6031071057"
    },
    ERROR = {
        color = Color3.fromRGB(255, 75, 75),
        icon = "rbxassetid://6031071059"
    },
    REMOTE = {
        color = Color3.fromRGB(150, 75, 255),
        icon = "rbxassetid://6031071055"
    }
}

function DebugTab.new(parent)
    local self = setmetatable({}, DebugTab)
    self.parent = parent
    self.logs = {}
    self.remoteHooks = {}
    self.breakpoints = {}
    
    -- Create main container
    self.container = UI.create("Frame", {
        Size = UDim2.new(1, -20, 1, -20),
        Position = UDim2.new(0, 10, 0, 10),
        BackgroundTransparency = 1,
        Parent = parent
    })
    
    -- Create sections
    self:createConsoleSection()
    self:createRemoteSpySection()
    self:createBreakpointsSection()
    
    -- Initialize remote spy
    self:initializeRemoteSpy()
    
    -- Hook default print/warn/error functions
    self:hookPrintFunctions()
    
    return self
end

function DebugTab:createConsoleSection()
    local section = UI.create("Frame", {
        Size = UDim2.new(1, 0, 0.4, -5),
        BackgroundColor3 = COLORS.Secondary,
        Parent = self.container
    })
    
    -- Header
    local header = UI.create("Frame", {
        Size = UDim2.new(1, 0, 0, 30),
        BackgroundTransparency = 1,
        Parent = section
    })
    
    UI.create("TextLabel", {
        Size = UDim2.new(0, 200, 1, 0),
        Position = UDim2.new(0, 10, 0, 0),
        BackgroundTransparency = 1,
        Text = "Console",
        TextSize = 16,
        Font = Enum.Font.GothamBold,
        TextXAlignment = Enum.TextXAlignment.Left,
        Parent = header
    })
    
    -- Clear button
    local clearBtn = UI.create("TextButton", {
        Size = UDim2.new(0, 80, 0, 24),
        Position = UDim2.new(1, -90, 0, 3),
        Text = "Clear",
        Parent = header
    })
    
    UI.createRipple(clearBtn)
    
    clearBtn.MouseButton1Click:Connect(function()
        self:clearLogs()
    end)
    
    -- Log container
    self.logContainer = UI.create("ScrollingFrame", {
        Size = UDim2.new(1, -20, 1, -40),
        Position = UDim2.new(0, 10, 0, 35),
        BackgroundTransparency = 1,
        ScrollBarThickness = 4,
        ScrollBarImageColor3 = COLORS.Accent,
        Parent = section
    })
    
    -- List layout
    local listLayout = Instance.new("UIListLayout")
    listLayout.Padding = UDim.new(0, 5)
    listLayout.Parent = self.logContainer
    
    -- Auto-scroll
    listLayout:GetPropertyChangedSignal("AbsoluteContentSize"):Connect(function()
        self.logContainer.CanvasSize = UDim2.new(0, 0, 0, listLayout.AbsoluteContentSize.Y)
        if self.autoScroll then
            self.logContainer.CanvasPosition = Vector2.new(0, listLayout.AbsoluteContentSize.Y)
        end
    end)
end

function DebugTab:createRemoteSpySection()
    local section = UI.create("Frame", {
        Size = UDim2.new(1, 0, 0.3, -5),
        Position = UDim2.new(0, 0, 0.4, 5),
        BackgroundColor3 = COLORS.Secondary,
        Parent = self.container
    })
    
    -- Header
    local header = UI.create("Frame", {
        Size = UDim2.new(1, 0, 0, 30),
        BackgroundTransparency = 1,
        Parent = section
    })
    
    UI.create("TextLabel", {
        Size = UDim2.new(0, 200, 1, 0),
        Position = UDim2.new(0, 10, 0, 0),
        BackgroundTransparency = 1,
        Text = "Remote Spy",
        TextSize = 16,
        Font = Enum.Font.GothamBold,
        TextXAlignment = Enum.TextXAlignment.Left,
        Parent = header
    })
    
    -- Toggle button
    local toggleBtn = UI.createToggle({
        title = "Enable Spy",
        default = false,
        onToggle = function(enabled)
            self.spyEnabled = enabled
        end
    })
    toggleBtn.Position = UDim2.new(1, -140, 0, 3)
    toggleBtn.Parent = header
    
    -- Remote list
    self.remoteList = UI.create("ScrollingFrame", {
        Size = UDim2.new(1, -20, 1, -40),
        Position = UDim2.new(0, 10, 0, 35),
        BackgroundTransparency = 1,
        ScrollBarThickness = 4,
        ScrollBarImageColor3 = COLORS.Accent,
        Parent = section
    })
    
    local listLayout = Instance.new("UIListLayout")
    listLayout.Padding = UDim.new(0, 5)
    listLayout.Parent = self.remoteList
    
    listLayout:GetPropertyChangedSignal("AbsoluteContentSize"):Connect(function()
        self.remoteList.CanvasSize = UDim2.new(0, 0, 0, listLayout.AbsoluteContentSize.Y)
    end)
end
function DebugTab:createBreakpointsSection()
    local section = UI.create("Frame", {
        Size = UDim2.new(1, 0, 0.3, -5),
        Position = UDim2.new(0, 0, 0.7, 5),
        BackgroundColor3 = COLORS.Secondary,
        Parent = self.container
    })
    
    -- Header
    local header = UI.create("Frame", {
        Size = UDim2.new(1, 0, 0, 30),
        BackgroundTransparency = 1,
        Parent = section
    })
    
    UI.create("TextLabel", {
        Size = UDim2.new(0, 200, 1, 0),
        Position = UDim2.new(0, 10, 0, 0),
        BackgroundTransparency = 1,
        Text = "Breakpoints",
        TextSize = 16,
        Font = Enum.Font.GothamBold,
        TextXAlignment = Enum.TextXAlignment.Left,
        Parent = header
    })
    
    -- Add breakpoint button
    local addBtn = UI.create("TextButton", {
        Size = UDim2.new(0, 100, 0, 24),
        Position = UDim2.new(1, -110, 0, 3),
        Text = "Add",
        Parent = header
    })
    
    UI.createRipple(addBtn)
    
    addBtn.MouseButton1Click:Connect(function()
        self:showBreakpointDialog()
    end)
    
    -- Breakpoint list
    self.breakpointList = UI.create("ScrollingFrame", {
        Size = UDim2.new(1, -20, 1, -40),
        Position = UDim2.new(0, 10, 0, 35),
        BackgroundTransparency = 1,
        ScrollBarThickness = 4,
        ScrollBarImageColor3 = COLORS.Accent,
        Parent = section
    })
    
    local listLayout = Instance.new("UIListLayout")
    listLayout.Padding = UDim.new(0, 5)
    listLayout.Parent = self.breakpointList
    
    listLayout:GetPropertyChangedSignal("AbsoluteContentSize"):Connect(function()
        self.breakpointList.CanvasSize = UDim2.new(0, 0, 0, listLayout.AbsoluteContentSize.Y)
    end)
end

function DebugTab:addLog(message, logType)
    local logEntry = UI.create("Frame", {
        Size = UDim2.new(1, 0, 0, 30),
        BackgroundColor3 = COLORS.Background,
        Parent = self.logContainer
    })
    
    -- Log icon
    UI.create("ImageLabel", {
        Size = UDim2.new(0, 16, 0, 16),
        Position = UDim2.new(0, 7, 0.5, -8),
        BackgroundTransparency = 1,
        Image = LOG_TYPES[logType].icon,
        ImageColor3 = LOG_TYPES[logType].color,
        Parent = logEntry
    })
    
    -- Timestamp
    local timestamp = os.date("%H:%M:%S")
    UI.create("TextLabel", {
        Size = UDim2.new(0, 60, 1, 0),
        Position = UDim2.new(0, 30, 0, 0),
        BackgroundTransparency = 1,
        Text = timestamp,
        TextColor3 = COLORS.TextDark,
        TextXAlignment = Enum.TextXAlignment.Left,
        Parent = logEntry
    })
    
    -- Message
    local messageLabel = UI.create("TextLabel", {
        Size = UDim2.new(1, -100, 1, 0),
        Position = UDim2.new(0, 90, 0, 0),
        BackgroundTransparency = 1,
        Text = tostring(message),
        TextColor3 = LOG_TYPES[logType].color,
        TextXAlignment = Enum.TextXAlignment.Left,
        TextWrapped = true,
        Parent = logEntry
    })
    
    -- Adjust height based on text wrap
    local textSize = game:GetService("TextService"):GetTextSize(
        messageLabel.Text,
        messageLabel.TextSize,
        messageLabel.Font,
        Vector2.new(messageLabel.AbsoluteSize.X, math.huge)
    )
    logEntry.Size = UDim2.new(1, 0, 0, math.max(30, textSize.Y + 10))
    
    -- Copy on click
    logEntry.InputBegan:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 then
            setclipboard(message)
            self:addLog("Copied to clipboard: " .. message, "INFO")
        end
    end)
    
    table.insert(self.logs, logEntry)
    
    -- Limit log entries
    if #self.logs > 1000 then
        self.logs[1]:Destroy()
        table.remove(self.logs, 1)
    end
end

function DebugTab:clearLogs()
    for _, log in ipairs(self.logs) do
        log:Destroy()
    end
    self.logs = {}
end

function DebugTab:hookPrintFunctions()
    local oldPrint = print
    print = function(...)
        local args = {...}
        local message = table.concat(args, " ")
        self:addLog(message, "INFO")
        oldPrint(...)
    end
    
    local oldWarn = warn
    warn = function(...)
        local args = {...}
        local message = table.concat(args, " ")
        self:addLog(message, "WARNING")
        oldWarn(...)
    end
    
    local oldError = error
    error = function(...)
        local args = {...}
        local message = table.concat(args, " ")
        self:addLog(message, "ERROR")
        oldError(...)
    end
end

function DebugTab:initializeRemoteSpy()
    local mt = getrawmetatable(game)
    local oldNamecall = mt.__namecall
    setreadonly(mt, false)
    
    mt.__namecall = newcclosure(function(self, ...)
        local args = {...}
        local method = getnamecallmethod()
        
        if self.spyEnabled and (method == "FireServer" or method == "InvokeServer") then
            local remote = self
            local path = remote:GetFullName()
            
            -- Create remote entry if it doesn't exist
            if not self.remoteHooks[path] then
                self:addRemoteEntry(remote, path)
            end
            
            -- Log remote call
            self:addLog(string.format(
                "[Remote Spy] %s(%s)",
                path,
                table.concat(args, ", ")
            ), "REMOTE")
        end
        
        return oldNamecall(self, ...)
    end)
    
    setreadonly(mt, true)
end
function DebugTab:addRemoteEntry(remote, path)
    local entry = UI.create("Frame", {
        Size = UDim2.new(1, 0, 0, 60),
        BackgroundColor3 = COLORS.Background,
        Parent = self.remoteList
    })
    
    -- Remote name
    UI.create("TextLabel", {
        Size = UDim2.new(1, -20, 0, 20),
        Position = UDim2.new(0, 10, 0, 5),
        BackgroundTransparency = 1,
        Text = remote.Name,
        TextColor3 = COLORS.Text,
        Font = Enum.Font.GothamBold,
        TextXAlignment = Enum.TextXAlignment.Left,
        Parent = entry
    })
    
    -- Remote path
    UI.create("TextLabel", {
        Size = UDim2.new(1, -20, 0, 20),
        Position = UDim2.new(0, 10, 0, 25),
        BackgroundTransparency = 1,
        Text = path,
        TextColor3 = COLORS.TextDark,
        TextSize = 12,
        TextXAlignment = Enum.TextXAlignment.Left,
        Parent = entry
    })
    
    -- Action buttons
    local function createButton(text, position, callback)
        local button = UI.create("TextButton", {
            Size = UDim2.new(0, 60, 0, 20),
            Position = position,
            Text = text,
            TextSize = 12,
            Parent = entry
        })
        
        UI.createRipple(button)
        button.MouseButton1Click:Connect(callback)
        return button
    end
    
    -- View calls button
    createButton("View", UDim2.new(1, -180, 0, 35), function()
        self:showRemoteCalls(remote)
    end)
    
    -- Block button
    local blockBtn = createButton("Block", UDim2.new(1, -110, 0, 35), function()
        self:toggleRemoteBlock(remote, blockBtn)
    end)
    
    -- Copy path button
    createButton("Copy", UDim2.new(1, -40, 0, 35), function()
        setclipboard(path)
        self:addLog("Copied remote path: " .. path, "INFO")
    end)
    
    self.remoteHooks[path] = {
        entry = entry,
        calls = {},
        blocked = false
    }
end

function DebugTab:showRemoteCalls(remote)
    local path = remote:GetFullName()
    local hook = self.remoteHooks[path]
    
    if not hook then return end
    
    -- Create calls window
    local window = UI.createWindow({
        title = "Remote Calls: " .. remote.Name,
        size = UDim2.new(0, 500, 0, 400)
    })
    
    -- Calls list
    local callsList = UI.create("ScrollingFrame", {
        Size = UDim2.new(1, -20, 1, -60),
        Position = UDim2.new(0, 10, 0, 50),
        BackgroundTransparency = 1,
        ScrollBarThickness = 4,
        Parent = window
    })
    
    -- Add calls
    local yOffset = 0
    for _, call in ipairs(hook.calls) do
        local callEntry = UI.create("Frame", {
            Size = UDim2.new(1, 0, 0, 30),
            Position = UDim2.new(0, 0, 0, yOffset),
            BackgroundColor3 = COLORS.Background,
            Parent = callsList
        })
        
        -- Timestamp
        UI.create("TextLabel", {
            Size = UDim2.new(0, 60, 1, 0),
            BackgroundTransparency = 1,
            Text = call.timestamp,
            TextColor3 = COLORS.TextDark,
            Parent = callEntry
        })
        
        -- Arguments
        UI.create("TextLabel", {
            Size = UDim2.new(1, -70, 1, 0),
            Position = UDim2.new(0, 70, 0, 0),
            BackgroundTransparency = 1,
            Text = table.concat(call.args, ", "),
            TextXAlignment = Enum.TextXAlignment.Left,
            Parent = callEntry
        })
        
        yOffset = yOffset + 35
    end
    
    callsList.CanvasSize = UDim2.new(0, 0, 0, yOffset)
end

function DebugTab:toggleRemoteBlock(remote, button)
    local path = remote:GetFullName()
    local hook = self.remoteHooks[path]
    
    if not hook then return end
    
    hook.blocked = not hook.blocked
    button.BackgroundColor3 = hook.blocked and COLORS.Error or COLORS.Secondary
    
    self:addLog(string.format(
        "%s remote calls for: %s",
        hook.blocked and "Blocked" or "Unblocked",
        path
    ), "INFO")
end

function DebugTab:showBreakpointDialog()
    local dialog = UI.createDialog({
        title = "Add Breakpoint",
        fields = {
            {
                name = "Path",
                placeholder = "game.Workspace.Example"
            },
            {
                name = "Type",
                type = "dropdown",
                options = {"Property", "Function", "Remote"}
            },
            {
                name = "Condition",
                placeholder = "value == true",
                optional = true
            }
        },
        callback = function(data)
            self:addBreakpoint(data.Path, data.Type, data.Condition)
        end
    })
    
    dialog.Parent = self.parent.Parent
end

function DebugTab:addBreakpoint(path, type, condition)
    local success, instance = pcall(function()
        return game:GetService("PathfindingService"):ParseInstance(path)
    end)
    
    if not success or not instance then
        self:addLog("Invalid path: " .. path, "ERROR")
        return
    end
    
    local breakpoint = {
        path = path,
        type = type,
        condition = condition,
        enabled = true
    }
    
    -- Create breakpoint entry
    local entry = UI.create("Frame", {
        Size = UDim2.new(1, 0, 0, 40),
        BackgroundColor3 = COLORS.Background,
        Parent = self.breakpointList
    })
    
    -- Path
    UI.create("TextLabel", {
        Size = UDim2.new(1, -100, 1, 0),
        Position = UDim2.new(0, 10, 0, 0),
        BackgroundTransparency = 1,
        Text = path,
        TextXAlignment = Enum.TextXAlignment.Left,
        Parent = entry
    })
    
    -- Toggle button
    local toggleBtn = UI.createToggle({
        default = true,
        onToggle = function(enabled)
            breakpoint.enabled = enabled
        end
    })
    toggleBtn.Position = UDim2.new(1, -90, 0.5, -10)
    toggleBtn.Parent = entry
    
    -- Remove button
    local removeBtn = UI.create("ImageButton", {
        Size = UDim2.new(0, 20, 0, 20),
        Position = UDim2.new(1, -30, 0.5, -10),
        Image = "rbxassetid://6031094678",
        ImageColor3 = COLORS.Error,
        BackgroundTransparency = 1,
        Parent = entry
    })
    
    removeBtn.MouseButton1Click:Connect(function()
        entry:Destroy()
        table.remove(self.breakpoints, table.find(self.breakpoints, breakpoint))
    end)
    
    -- Add breakpoint
    table.insert(self.breakpoints, breakpoint)
    self:hookBreakpoint(breakpoint, instance)
end

function DebugTab:hookBreakpoint(breakpoint, instance)
    if breakpoint.type == "Property" then
        local connection
        connection = instance:GetPropertyChangedSignal(breakpoint.path:match("%.([^%.]+)$")):Connect(function()
            if not breakpoint.enabled then return end
            
            local value = instance[breakpoint.path:match("%.([^%.]+)$")]
            if not breakpoint.condition or loadstring("return " .. breakpoint.condition)() then
                self:addLog(string.format(
                    "[Breakpoint] Property changed: %s = %s",
                    breakpoint.path,
                    tostring(value)
                ), "INFO")
            end
        end)
    elseif breakpoint.type == "Function" then
        -- Hook function calls using debug library
        -- Note: This requires additional security bypass
    elseif breakpoint.type == "Remote" then
        -- Remote calls are already handled by the remote spy
    end
end

function DebugTab:destroy()
    -- Restore original functions
    print = self.oldPrint
    warn = self.oldWarn
    error = self.oldError
    
    -- Clean up hooks
    for _, hook in pairs(self.remoteHooks) do
        hook.entry:Destroy()
    end
end

-- Combat Tab Implementation
local CombatTab = {}
CombatTab.__index = CombatTab

-- Import dependencies
local PhantomHub = shared.PhantomHub or getgenv().PhantomHub
local UI = PhantomHub.UI
local Services = PhantomHub.Services
local COLORS = PhantomHub.colors

-- Constants
local AIMBOT_MODES = {
    "Nearest",
    "FOV",
    "Health",
    "Random"
}

local HITBOX_PARTS = {
    "Head",
    "HumanoidRootPart",
    "Torso",
    "Left Arm",
    "Right Arm",
    "Left Leg",
    "Right Leg"
}

function CombatTab.new(parent)
    local self = setmetatable({}, CombatTab)
    self.parent = parent
    self.connections = {}
    self.targets = {}
    self.whitelist = {}
    
    -- Create main container
    self.container = UI.create("ScrollingFrame", {
        Size = UDim2.new(1, -20, 1, -20),
        Position = UDim2.new(0, 10, 0, 10),
        BackgroundTransparency = 1,
        ScrollBarThickness = 4,
        ScrollBarImageColor3 = COLORS.Accent,
        Parent = parent
    })
    
    -- Create sections
    self:createAimbotSection()
    self:createHitboxSection()
    self:createSilentAimSection()
    self:createTargetSection()
    
    -- Initialize combat features
    self:initializeAimbot()
    self:initializeSilentAim()
    
    return self
end

function CombatTab:createAimbotSection()
    local section = UI.create("Frame", {
        Size = UDim2.new(1, 0, 0, 280),
        BackgroundColor3 = COLORS.Secondary,
        Parent = self.container
    })
    
    -- Section header
    UI.create("TextLabel", {
        Size = UDim2.new(1, -20, 0, 30),
        Position = UDim2.new(0, 10, 0, 5),
        BackgroundTransparency = 1,
        Text = "Aimbot",
        TextSize = 16,
        Font = Enum.Font.GothamBold,
        TextXAlignment = Enum.TextXAlignment.Left,
        Parent = section
    })
    
    -- Enable toggle
    local aimbotToggle = UI.createToggle({
        title = "Enable Aimbot",
        default = false,
        onToggle = function(enabled)
            self.aimbotEnabled = enabled
            if enabled then
                self:addLog("Aimbot enabled")
            else
                self:addLog("Aimbot disabled")
            end
        end
    })
    aimbotToggle.Position = UDim2.new(0, 10, 0, 40)
    aimbotToggle.Parent = section
    
    -- Mode selector
    local modeDropdown = UI.createDropdown({
        title = "Target Mode",
        options = AIMBOT_MODES,
        default = "Nearest",
        onSelect = function(mode)
            self.aimbotMode = mode
        end
    })
    modeDropdown.Position = UDim2.new(0, 10, 0, 80)
    modeDropdown.Parent = section
    
    -- FOV settings
    self.fovSlider = UI.createSlider({
        title = "FOV",
        min = 0,
        max = 360,
        default = 90,
        onValueChanged = function(value)
            self.aimbotFOV = value
            if self.fovCircle then
                self.fovCircle.Radius = value
            end
        end
    })
    self.fovSlider.Position = UDim2.new(0, 10, 0, 130)
    self.fovSlider.Parent = section
    
    -- Show FOV toggle
    local showFOVToggle = UI.createToggle({
        title = "Show FOV",
        default = false,
        onToggle = function(enabled)
            self:toggleFOVCircle(enabled)
        end
    })
    showFOVToggle.Position = UDim2.new(0, 10, 0, 180)
    showFOVToggle.Parent = section
    
    -- Smoothness slider
    self.smoothnessSlider = UI.createSlider({
        title = "Smoothness",
        min = 1,
        max = 100,
        default = 50,
        onValueChanged = function(value)
            self.aimbotSmoothness = value / 100
        end
    })
    self.smoothnessSlider.Position = UDim2.new(0, 10, 0, 220)
    self.smoothnessSlider.Parent = section
end

function CombatTab:createHitboxSection()
    local section = UI.create("Frame", {
        Size = UDim2.new(1, 0, 0, 240),
        Position = UDim2.new(0, 0, 0, 290),
        BackgroundColor3 = COLORS.Secondary,
        Parent = self.container
    })
    
    -- Section header
    UI.create("TextLabel", {
        Size = UDim2.new(1, -20, 0, 30),
        Position = UDim2.new(0, 10, 0, 5),
        BackgroundTransparency = 1,
        Text = "Hitbox Expander",
        TextSize = 16,
        Font = Enum.Font.GothamBold,
        TextXAlignment = Enum.TextXAlignment.Left,
        Parent = section
    })
        -- Enable toggle
    local hitboxToggle = UI.createToggle({
        title = "Enable Hitbox Expander",
        default = false,
        onToggle = function(enabled)
            self.hitboxEnabled = enabled
            self:updateHitboxes()
        end
    })
    hitboxToggle.Position = UDim2.new(0, 10, 0, 40)
    hitboxToggle.Parent = section
    
    -- Hitbox part selector
    local partDropdown = UI.createDropdown({
        title = "Target Part",
        options = HITBOX_PARTS,
        default = "Head",
        onSelect = function(part)
            self.hitboxPart = part
            self:updateHitboxes()
        end
    })
    partDropdown.Position = UDim2.new(0, 10, 0, 80)
    partDropdown.Parent = section
    
    -- Size slider
    self.hitboxSizeSlider = UI.createSlider({
        title = "Hitbox Size",
        min = 1,
        max = 10,
        default = 2,
        onValueChanged = function(value)
            self.hitboxSize = value
            self:updateHitboxes()
        end
    })
    self.hitboxSizeSlider.Position = UDim2.new(0, 10, 0, 130)
    self.hitboxSizeSlider.Parent = section
    
    -- Transparency slider
    self.hitboxTransparencySlider = UI.createSlider({
        title = "Transparency",
        min = 0,
        max = 100,
        default = 50,
        onValueChanged = function(value)
            self.hitboxTransparency = value / 100
            self:updateHitboxes()
        end
    })
    self.hitboxTransparencySlider.Position = UDim2.new(0, 10, 0, 180)
    self.hitboxTransparencySlider.Parent = section
end

function CombatTab:createSilentAimSection()
    local section = UI.create("Frame", {
        Size = UDim2.new(1, 0, 0, 280),
        Position = UDim2.new(0, 0, 0, 540),
        BackgroundColor3 = COLORS.Secondary,
        Parent = self.container
    })
    
    -- Section header
    UI.create("TextLabel", {
        Size = UDim2.new(1, -20, 0, 30),
        Position = UDim2.new(0, 10, 0, 5),
        BackgroundTransparency = 1,
        Text = "Silent Aim",
        TextSize = 16,
        Font = Enum.Font.GothamBold,
        TextXAlignment = Enum.TextXAlignment.Left,
        Parent = section
    })
    
    -- Enable toggle
    local silentAimToggle = UI.createToggle({
        title = "Enable Silent Aim",
        default = false,
        onToggle = function(enabled)
            self.silentAimEnabled = enabled
        end
    })
    silentAimToggle.Position = UDim2.new(0, 10, 0, 40)
    silentAimToggle.Parent = section
    
    -- Hit chance slider
    self.hitChanceSlider = UI.createSlider({
        title = "Hit Chance",
        min = 0,
        max = 100,
        default = 100,
        onValueChanged = function(value)
            self.silentAimHitChance = value
        end
    })
    self.hitChanceSlider.Position = UDim2.new(0, 10, 0, 80)
    self.hitChanceSlider.Parent = section
    
    -- Target part selector
    local partDropdown = UI.createDropdown({
        title = "Target Part",
        options = HITBOX_PARTS,
        default = "Head",
        onSelect = function(part)
            self.silentAimPart = part
        end
    })
    partDropdown.Position = UDim2.new(0, 10, 0, 130)
    partDropdown.Parent = section
    
    -- FOV settings
    self.silentAimFOVSlider = UI.createSlider({
        title = "FOV",
        min = 0,
        max = 360,
        default = 90,
        onValueChanged = function(value)
            self.silentAimFOV = value
            if self.silentAimFOVCircle then
                self.silentAimFOVCircle.Radius = value
            end
        end
    })
    self.silentAimFOVSlider.Position = UDim2.new(0, 10, 0, 180)
    self.silentAimFOVSlider.Parent = section
    
    -- Show FOV toggle
    local showFOVToggle = UI.createToggle({
        title = "Show Silent Aim FOV",
        default = false,
        onToggle = function(enabled)
            self:toggleSilentAimFOVCircle(enabled)
        end
    })
    showFOVToggle.Position = UDim2.new(0, 10, 0, 230)
    showFOVToggle.Parent = section
end

function CombatTab:createTargetSection()
    local section = UI.create("Frame", {
        Size = UDim2.new(1, 0, 0, 300),
        Position = UDim2.new(0, 0, 0, 830),
        BackgroundColor3 = COLORS.Secondary,
        Parent = self.container
    })
    
    -- Section header
    UI.create("TextLabel", {
        Size = UDim2.new(1, -20, 0, 30),
        Position = UDim2.new(0, 10, 0, 5),
        BackgroundTransparency = 1,
        Text = "Target Management",
        TextSize = 16,
        Font = Enum.Font.GothamBold,
        TextXAlignment = Enum.TextXAlignment.Left,
        Parent = section
    })
    
    -- Target list
    self.targetList = UI.create("ScrollingFrame", {
        Size = UDim2.new(1, -20, 0, 200),
        Position = UDim2.new(0, 10, 0, 40),
        BackgroundColor3 = COLORS.Background,
        ScrollBarThickness = 4,
        Parent = section
    })
    
    -- Add target button
    local addTargetBtn = UI.create("TextButton", {
        Size = UDim2.new(1, -20, 0, 30),
        Position = UDim2.new(0, 10, 0, 250),
        Text = "Add Target",
        Parent = section
    })
    
    UI.createRipple(addTargetBtn)
    
    addTargetBtn.MouseButton1Click:Connect(function()
        self:showTargetDialog()
    end)
    
    -- Set final container size
    self.container.CanvasSize = UDim2.new(0, 0, 0, 1140)
end
function CombatTab:initializeAimbot()
    -- Create FOV circle
    self.fovCircle = Drawing.new("Circle")
    self.fovCircle.Thickness = 1
    self.fovCircle.Color = COLORS.Accent
    self.fovCircle.Transparency = 0.5
    self.fovCircle.Visible = false
    
    -- Main aimbot loop
    self.connections.aimbot = Services.RunService.RenderStepped:Connect(function()
        if not self.aimbotEnabled then return end
        
        -- Update FOV circle position
        if self.fovCircle.Visible then
            self.fovCircle.Position = Vector2.new(
                workspace.CurrentCamera.ViewportSize.X / 2,
                workspace.CurrentCamera.ViewportSize.Y / 2
            )
        end
        
        -- Get target
        local target = self:getTarget()
        if not target then return end
        
        -- Calculate aim position
        local targetPart = target.Character:FindFirstChild(self.hitboxPart or "Head")
        if not targetPart then return end
        
        local targetPos = targetPart.Position
        local screenPos, onScreen = workspace.CurrentCamera:WorldToScreenPoint(targetPos)
        if not onScreen then return end
        
        -- Apply aim
        local mousePos = Vector2.new(Services.UserInputService:GetMouseLocation().X, Services.UserInputService:GetMouseLocation().Y)
        local aimPos = Vector2.new(screenPos.X, screenPos.Y)
        local delta = (aimPos - mousePos) * self.aimbotSmoothness
        
        mousemoverel(delta.X, delta.Y)
    end)
end

function CombatTab:initializeSilentAim()
    local oldNamecall
    oldNamecall = hookmetamethod(game, "__namecall", function(self, ...)
        local args = {...}
        local method = getnamecallmethod()
        
        if not checkcaller() and self.silentAimEnabled and 
           (method == "FindPartOnRayWithIgnoreList" or method == "FindPartOnRay") then
            -- Check hit chance
            if math.random(1, 100) > self.silentAimHitChance then
                return oldNamecall(self, ...)
            end
            
            -- Get target
            local target = self:getTarget()
            if not target then return oldNamecall(self, ...) end
            
            -- Modify ray
            local targetPart = target.Character:FindFirstChild(self.silentAimPart or "Head")
            if not targetPart then return oldNamecall(self, ...) end
            
            local origin = args[1].Origin
            local direction = (targetPart.Position - origin).Unit * 1000
            
            args[1] = Ray.new(origin, direction)
        end
        
        return oldNamecall(self, unpack(args))
    end)
end

function CombatTab:getTarget()
    local players = {}
    for _, player in ipairs(Services.Players:GetPlayers()) do
        if player ~= Services.Players.LocalPlayer and 
           player.Character and 
           player.Character:FindFirstChild("Humanoid") and
           player.Character.Humanoid.Health > 0 and
           not self:isWhitelisted(player) then
            table.insert(players, player)
        end
    end
    
    if #players == 0 then return nil end
    
    if self.aimbotMode == "Nearest" then
        local nearest = nil
        local minDist = math.huge
        
        for _, player in ipairs(players) do
            local dist = (player.Character.HumanoidRootPart.Position - 
                        Services.Players.LocalPlayer.Character.HumanoidRootPart.Position).Magnitude
            if dist < minDist then
                nearest = player
                minDist = dist
            end
        end
        
    elseif self.aimbotMode == "FOV" then
        local inFOV = {}
        
        for _, player in ipairs(players) do
            local screenPos, onScreen = workspace.CurrentCamera:WorldToScreenPoint(
                player.Character.HumanoidRootPart.Position
            )
            
            if onScreen then
                local mousePos = Vector2.new(
                    workspace.CurrentCamera.ViewportSize.X / 2,
                    workspace.CurrentCamera.ViewportSize.Y / 2
                )
                local dist = (Vector2.new(screenPos.X, screenPos.Y) - mousePos).Magnitude
                
                if dist <= self.aimbotFOV then
                    table.insert(inFOV, player)
                end
            end
        end
        
        if #inFOV > 0 then
            return inFOV[math.random(1, #inFOV)]
        end
        
    elseif self.aimbotMode == "Health" then
        local lowestHealth = nil
        local minHealth = math.huge
        
        for _, player in ipairs(players) do
            local health = player.Character.Humanoid.Health
            if health < minHealth then
                lowestHealth = player
                minHealth = health
            end
        end
        
    elseif self.aimbotMode == "Random" then
        return players[math.random(1, #players)]
    end
    
    return nil
end

function CombatTab:updateHitboxes()
    for _, player in ipairs(Services.Players:GetPlayers()) do
        if player ~= Services.Players.LocalPlayer and 
           player.Character and
           not self:isWhitelisted(player) then
            local part = player.Character:FindFirstChild(self.hitboxPart)
            if part then
                if self.hitboxEnabled then
                    part.Size = Vector3.new(self.hitboxSize, self.hitboxSize, self.hitboxSize)
                    part.Transparency = self.hitboxTransparency
                else
                    part.Size = self.originalSizes[part] or Vector3.new(1, 1, 1)
                    part.Transparency = 0
                end
            end
        end
    end
end

function CombatTab:toggleFOVCircle(enabled)
    self.fovCircle.Visible = enabled
end

function CombatTab:toggleSilentAimFOVCircle(enabled)
    if not self.silentAimFOVCircle then
        self.silentAimFOVCircle = Drawing.new("Circle")
        self.silentAimFOVCircle.Thickness = 1
        self.silentAimFOVCircle.Color = Color3.fromRGB(255, 70, 70)
        self.silentAimFOVCircle.Transparency = 0.5
    end
    
    self.silentAimFOVCircle.Visible = enabled
end

function CombatTab:showTargetDialog()
    local dialog = UI.createDialog({
        title = "Add Target",
        fields = {
            {
                name = "Player",
                type = "dropdown",
                options = self:getPlayerNames()
            },
            {
                name = "Priority",
                type = "dropdown",
                options = {"High", "Medium", "Low"}
            }
        },
        callback = function(data)
            self:addTarget(data.Player, data.Priority)
        end
    })
    
    dialog.Parent = self.parent.Parent
end

function CombatTab:isWhitelisted(player)
    return self.whitelist[player.Name] ~= nil
end

function CombatTab:destroy()
    -- Clean up connections
    for _, connection in pairs(self.connections) do
        connection:Disconnect()
    end
    
    -- Remove drawings
    if self.fovCircle then
        self.fovCircle:Remove()
    end
    
    if self.silentAimFOVCircle then
        self.silentAimFOVCircle:Remove()
    end
    
    -- Reset hitboxes
    self.hitboxEnabled = false
    self:updateHitboxes()
end

-- Visuals Tab Implementation
local VisualsTab = {}
VisualsTab.__index = VisualsTab

-- Import dependencies
local PhantomHub = shared.PhantomHub or getgenv().PhantomHub
local UI = PhantomHub.UI
local Services = PhantomHub.Services
local COLORS = PhantomHub.colors

-- Constants
local ESP_SETTINGS = {
    BOX = {
        Thickness = 1,
        Color = Color3.fromRGB(255, 255, 255),
        Transparency = 1
    },
    SKELETON = {
        Thickness = 1,
        Color = Color3.fromRGB(255, 255, 255),
        Transparency = 1
    },
    HEALTHBAR = {
        Width = 2,
        BackgroundColor = Color3.fromRGB(255, 0, 0),
        Color = Color3.fromRGB(0, 255, 0),
        Transparency = 1
    },
    TEXT = {
        Size = 13,
        Color = Color3.fromRGB(255, 255, 255),
        Transparency = 1,
        Font = 2, -- Enum.Font.Code
        OutlineColor = Color3.fromRGB(0, 0, 0)
    }
}

local CHAMS_SETTINGS = {
    VISIBLE = {
        Color = Color3.fromRGB(0, 255, 0),
        Transparency = 0.5
    },
    OCCLUDED = {
        Color = Color3.fromRGB(255, 0, 0),
        Transparency = 0.25
    }
}

function VisualsTab.new(parent)
    local self = setmetatable({}, VisualsTab)
    self.parent = parent
    self.connections = {}
    self.espObjects = {}
    self.chamsObjects = {}
    
    -- Create main container
    self.container = UI.create("ScrollingFrame", {
        Size = UDim2.new(1, -20, 1, -20),
        Position = UDim2.new(0, 10, 0, 10),
        BackgroundTransparency = 1,
        ScrollBarThickness = 4,
        ScrollBarImageColor3 = COLORS.Accent,
        Parent = parent
    })
    
    -- Create sections
    self:createESPSection()
    self:createChamsSection()
    self:createWorldSection()
    self:createViewmodelSection()
    
    -- Initialize visuals
    self:initializeESP()
    self:initializeChams()
    
    return self
end

function VisualsTab:createESPSection()
    local section = UI.create("Frame", {
        Size = UDim2.new(1, 0, 0, 340),
        BackgroundColor3 = COLORS.Secondary,
        Parent = self.container
    })
    
    -- Section header
    UI.create("TextLabel", {
        Size = UDim2.new(1, -20, 0, 30),
        Position = UDim2.new(0, 10, 0, 5),
        BackgroundTransparency = 1,
        Text = "ESP",
        TextSize = 16,
        Font = Enum.Font.GothamBold,
        TextXAlignment = Enum.TextXAlignment.Left,
        Parent = section
    })
    
    -- Master toggle
    local espToggle = UI.createToggle({
        title = "Enable ESP",
        default = false,
        onToggle = function(enabled)
            self.espEnabled = enabled
            self:updateESPVisibility()
        end
    })
    espToggle.Position = UDim2.new(0, 10, 0, 40)
    espToggle.Parent = section
    
    -- ESP features
    local features = {
        {name = "Boxes", default = true},
        {name = "Skeleton", default = true},
        {name = "Health Bar", default = true},
        {name = "Name", default = true},
        {name = "Distance", default = true},
        {name = "Weapon", default = true},
        {name = "Tracers", default = false}
    }
    
    for i, feature in ipairs(features) do
        local toggle = UI.createToggle({
            title = feature.name,
            default = feature.default,
            onToggle = function(enabled)
                self.espSettings[feature.name:lower()] = enabled
                self:updateESPFeatures()
            end
        })
        toggle.Position = UDim2.new(0, 10, 0, 80 + (i-1) * 35)
        toggle.Parent = section
    end
    
    -- Color pickers
    local colors = {
        {name = "Team Color", default = Color3.fromRGB(0, 255, 0)},
        {name = "Enemy Color", default = Color3.fromRGB(255, 0, 0)},
        {name = "Visible Color", default = Color3.fromRGB(0, 255, 0)},
        {name = "Invisible Color", default = Color3.fromRGB(255, 0, 0)}
    }
    
    for i, color in ipairs(colors) do
        local picker = UI.createColorPicker({
            title = color.name,
            default = color.default,
            onColorChanged = function(newColor)
                self.espColors[color.name:lower():gsub(" ", "_")] = newColor
                self:updateESPColors()
            end
        })
        picker.Position = UDim2.new(0, 10, 0, 80 + (#features * 35) + (i-1) * 45)
        picker.Parent = section
    end
end
function VisualsTab:createChamsSection()
    local section = UI.create("Frame", {
        Size = UDim2.new(1, 0, 0, 280),
        Position = UDim2.new(0, 0, 0, 350),
        BackgroundColor3 = COLORS.Secondary,
        Parent = self.container
    })
    
    -- Section header
    UI.create("TextLabel", {
        Size = UDim2.new(1, -20, 0, 30),
        Position = UDim2.new(0, 10, 0, 5),
        BackgroundTransparency = 1,
        Text = "Chams",
        TextSize = 16,
        Font = Enum.Font.GothamBold,
        TextXAlignment = Enum.TextXAlignment.Left,
        Parent = section
    })
    
    -- Master toggle
    local chamsToggle = UI.createToggle({
        title = "Enable Chams",
        default = false,
        onToggle = function(enabled)
            self.chamsEnabled = enabled
            self:updateChamsVisibility()
        end
    })
    chamsToggle.Position = UDim2.new(0, 10, 0, 40)
    chamsToggle.Parent = section
    
    -- Chams settings
    local settings = {
        {name = "Fill", default = true},
        {name = "Outline", default = true},
        {name = "Through Walls", default = true},
        {name = "Team Check", default = true}
    }
    
    for i, setting in ipairs(settings) do
        local toggle = UI.createToggle({
            title = setting.name,
            default = setting.default,
            onToggle = function(enabled)
                self.chamsSettings[setting.name:lower():gsub(" ", "_")] = enabled
                self:updateChamsSettings()
            end
        })
        toggle.Position = UDim2.new(0, 10, 0, 80 + (i-1) * 35)
        toggle.Parent = section
    end
    
    -- Color pickers
    local visibleColor = UI.createColorPicker({
        title = "Visible Color",
        default = CHAMS_SETTINGS.VISIBLE.Color,
        onColorChanged = function(color)
            CHAMS_SETTINGS.VISIBLE.Color = color
            self:updateChamsColors()
        end
    })
    visibleColor.Position = UDim2.new(0, 10, 0, 220)
    visibleColor.Parent = section
    
    local occludedColor = UI.createColorPicker({
        title = "Hidden Color",
        default = CHAMS_SETTINGS.OCCLUDED.Color,
        onColorChanged = function(color)
            CHAMS_SETTINGS.OCCLUDED.Color = color
            self:updateChamsColors()
        end
    })
    occludedColor.Position = UDim2.new(0, 10, 0, 265)
    occludedColor.Parent = section
end

function VisualsTab:createWorldSection()
    local section = UI.create("Frame", {
        Size = UDim2.new(1, 0, 0, 380),
        Position = UDim2.new(0, 0, 0, 640),
        BackgroundColor3 = COLORS.Secondary,
        Parent = self.container
    })
    
    -- Section header
    UI.create("TextLabel", {
        Size = UDim2.new(1, -20, 0, 30),
        Position = UDim2.new(0, 10, 0, 5),
        BackgroundTransparency = 1,
        Text = "World",
        TextSize = 16,
        Font = Enum.Font.GothamBold,
        TextXAlignment = Enum.TextXAlignment.Left,
        Parent = section
    })
    
    -- World settings
    local settings = {
        {
            name = "Ambient",
            type = "color",
            default = game.Lighting.Ambient
        },
        {
            name = "Brightness",
            type = "slider",
            min = 0,
            max = 10,
            default = game.Lighting.Brightness
        },
        {
            name = "Time",
            type = "slider",
            min = 0,
            max = 24,
            default = game.Lighting.ClockTime
        },
        {
            name = "Fog",
            type = "toggle",
            default = game.Lighting.FogEnabled
        },
        {
            name = "Fog Color",
            type = "color",
            default = game.Lighting.FogColor
        },
        {
            name = "Fog Start",
            type = "slider",
            min = 0,
            max = 1000,
            default = game.Lighting.FogStart
        },
        {
            name = "Fog End",
            type = "slider",
            min = 0,
            max = 1000,
            default = game.Lighting.FogEnd
        },
        {
            name = "Global Shadows",
            type = "toggle",
            default = game.Lighting.GlobalShadows
        }
    }
    
    local yOffset = 40
    for _, setting in ipairs(settings) do
        if setting.type == "color" then
            local picker = UI.createColorPicker({
                title = setting.name,
                default = setting.default,
                onColorChanged = function(color)
                    self:updateWorldSetting(setting.name:lower():gsub(" ", "_"), color)
                end
            })
            picker.Position = UDim2.new(0, 10, 0, yOffset)
            picker.Parent = section
            yOffset = yOffset + 45
            
        elseif setting.type == "slider" then
            local slider = UI.createSlider({
                title = setting.name,
                min = setting.min,
                max = setting.max,
                default = setting.default,
                onValueChanged = function(value)
                    self:updateWorldSetting(setting.name:lower():gsub(" ", "_"), value)
                end
            })
            slider.Position = UDim2.new(0, 10, 0, yOffset)
            slider.Parent = section
            yOffset = yOffset + 50
            
        elseif setting.type == "toggle" then
            local toggle = UI.createToggle({
                title = setting.name,
                default = setting.default,
                onToggle = function(enabled)
                    self:updateWorldSetting(setting.name:lower():gsub(" ", "_"), enabled)
                end
            })
            toggle.Position = UDim2.new(0, 10, 0, yOffset)
            toggle.Parent = section
            yOffset = yOffset + 35
        end
    end
end
function VisualsTab:createViewmodelSection()
    local section = UI.create("Frame", {
        Size = UDim2.new(1, 0, 0, 320),
        Position = UDim2.new(0, 0, 0, 1030),
        BackgroundColor3 = COLORS.Secondary,
        Parent = self.container
    })
    
    -- Section header
    UI.create("TextLabel", {
        Size = UDim2.new(1, -20, 0, 30),
        Position = UDim2.new(0, 10, 0, 5),
        BackgroundTransparency = 1,
        Text = "Viewmodel",
        TextSize = 16,
        Font = Enum.Font.GothamBold,
        TextXAlignment = Enum.TextXAlignment.Left,
        Parent = section
    })
    
    -- Viewmodel settings
    local settings = {
        {
            name = "Position",
            type = "vector3",
            default = Vector3.new(0, 0, 0)
        },
        {
            name = "Rotation",
            type = "vector3",
            default = Vector3.new(0, 0, 0)
        },
        {
            name = "FOV",
            type = "slider",
            min = 60,
            max = 120,
            default = workspace.CurrentCamera.FieldOfView
        },
        {
            name = "Arms Transparency",
            type = "slider",
            min = 0,
            max = 1,
            default = 0
        },
        {
            name = "Weapon Transparency",
            type = "slider",
            min = 0,
            max = 1,
            default = 0
        }
    }
    
    local yOffset = 40
    for _, setting in ipairs(settings) do
        if setting.type == "vector3" then
            local vectorInput = UI.createVector3Input({
                title = setting.name,
                default = setting.default,
                onValueChanged = function(value)
                    self:updateViewmodelSetting(setting.name:lower(), value)
                end
            })
            vectorInput.Position = UDim2.new(0, 10, 0, yOffset)
            vectorInput.Parent = section
            yOffset = yOffset + 80
            
        elseif setting.type == "slider" then
            local slider = UI.createSlider({
                title = setting.name,
                min = setting.min,
                max = setting.max,
                default = setting.default,
                onValueChanged = function(value)
                    self:updateViewmodelSetting(setting.name:lower():gsub(" ", "_"), value)
                end
            })
            slider.Position = UDim2.new(0, 10, 0, yOffset)
            slider.Parent = section
            yOffset = yOffset + 50
        end
    end
    
    -- Set final container size
    self.container.CanvasSize = UDim2.new(0, 0, 0, 1360)
end

function VisualsTab:initializeESP()
    -- Create ESP objects for existing players
    for _, player in ipairs(Services.Players:GetPlayers()) do
        if player ~= Services.Players.LocalPlayer then
            self:createESPObject(player)
        end
    end
    
    -- Handle player joining
    self.connections.playerAdded = Services.Players.PlayerAdded:Connect(function(player)
        self:createESPObject(player)
    end)
    
    -- Handle player leaving
    self.connections.playerRemoving = Services.Players.PlayerRemoving:Connect(function(player)
        if self.espObjects[player] then
            self:removeESPObject(player)
        end
    end)
    
    -- Update ESP
    self.connections.espUpdate = Services.RunService.RenderStepped:Connect(function()
        if not self.espEnabled then return end
        self:updateESP()
    end)
end

function VisualsTab:createESPObject(player)
    local esp = {
        box = Drawing.new("Square"),
        boxOutline = Drawing.new("Square"),
        healthBar = Drawing.new("Square"),
        healthBarOutline = Drawing.new("Square"),
        name = Drawing.new("Text"),
        distance = Drawing.new("Text"),
        weapon = Drawing.new("Text"),
        tracer = Drawing.new("Line"),
        skeleton = {}
    }
    
    -- Initialize skeleton lines
    local skeletonConnections = {
        {"Head", "UpperTorso"},
        {"UpperTorso", "LowerTorso"},
        {"UpperTorso", "LeftUpperArm"},
        {"LeftUpperArm", "LeftLowerArm"},
        {"LeftLowerArm", "LeftHand"},
        {"UpperTorso", "RightUpperArm"},
        {"RightUpperArm", "RightLowerArm"},
        {"RightLowerArm", "RightHand"},
        {"LowerTorso", "LeftUpperLeg"},
        {"LeftUpperLeg", "LeftLowerLeg"},
        {"LeftLowerLeg", "LeftFoot"},
        {"LowerTorso", "RightUpperLeg"},
        {"RightUpperLeg", "RightLowerLeg"},
        {"RightLowerLeg", "RightFoot"}
    }
    
    for _, connection in ipairs(skeletonConnections) do
        esp.skeleton[connection[1] .. connection[2]] = Drawing.new("Line")
    end
    
    -- Apply default properties
    self:applyESPProperties(esp)
    
    self.espObjects[player] = esp
end

function VisualsTab:updateESP()
    for player, esp in pairs(self.espObjects) do
        if player.Character and player.Character:FindFirstChild("HumanoidRootPart") then
            local character = player.Character
            local humanoid = character:FindFirstChild("Humanoid")
            local rootPart = character:FindFirstChild("HumanoidRootPart")
            
            if not humanoid or not rootPart then continue end
            
            -- Get screen position
            local rootPos = rootPart.Position
            local screenPos, onScreen = workspace.CurrentCamera:WorldToViewportPoint(rootPos)
            
            -- Update ESP elements
            if onScreen and humanoid.Health > 0 then
                self:updateESPBox(esp, character)
                self:updateESPHealthBar(esp, humanoid)
                self:updateESPText(esp, player, rootPos)
                self:updateESPSkeleton(esp, character)
                self:updateESPTracer(esp, screenPos)
            else
                self:hideESPObject(esp)
            end
        else
            self:hideESPObject(esp)
        end
    end
end

function VisualsTab:initializeChams()
    -- Create highlight objects for existing players
    for _, player in ipairs(Services.Players:GetPlayers()) do
        if player ~= Services.Players.LocalPlayer then
            self:createChamsObject(player)
        end
    end
    
    -- Handle player joining/leaving
    self.connections.chamsPlayerAdded = Services.Players.PlayerAdded:Connect(function(player)
        self:createChamsObject(player)
    end)
    
    self.connections.chamsPlayerRemoving = Services.Players.PlayerRemoving:Connect(function(player)
        if self.chamsObjects[player] then
            self:removeChamsObject(player)
        end
    end)
end

function VisualsTab:destroy()
    -- Clean up connections
    for _, connection in pairs(self.connections) do
        connection:Disconnect()
    end
    
    -- Clean up ESP objects
    for player, esp in pairs(self.espObjects) do
        self:removeESPObject(player)
    end
    
    -- Clean up Chams objects
    for player, chams in pairs(self.chamsObjects) do
        self:removeChamsObject(player)
    end
    
    -- Restore original lighting settings
    self:restoreWorldSettings()
end

-- Misc Tab Implementation
local MiscTab = {}
MiscTab.__index = MiscTab

-- Import dependencies
local PhantomHub = shared.PhantomHub or getgenv().PhantomHub
local UI = PhantomHub.UI
local Services = PhantomHub.Services
local COLORS = PhantomHub.colors

-- Constants
local MOVEMENT_SETTINGS = {
    SPEED = {
        min = 16,
        max = 200,
        default = 16
    },
    JUMP = {
        min = 50,
        max = 300,
        default = 50
    },
    FLY = {
        min = 16,
        max = 200,
        default = 50
    }
}

function MiscTab.new(parent)
    local self = setmetatable({}, MiscTab)
    self.parent = parent
    self.connections = {}
    
    -- Create main container
    self.container = UI.create("ScrollingFrame", {
        Size = UDim2.new(1, -20, 1, -20),
        Position = UDim2.new(0, 10, 0, 10),
        BackgroundTransparency = 1,
        ScrollBarThickness = 4,
        ScrollBarImageColor3 = COLORS.Accent,
        Parent = parent
    })
    
    -- Create sections
    self:createMovementSection()
    self:createCharacterSection()
    self:createServerSection()
    self:createUtilitySection()
    
    return self
end

function MiscTab:createMovementSection()
    local section = UI.create("Frame", {
        Size = UDim2.new(1, 0, 0, 380),
        BackgroundColor3 = COLORS.Secondary,
        Parent = self.container
    })
    
    -- Section header
    UI.create("TextLabel", {
        Size = UDim2.new(1, -20, 0, 30),
        Position = UDim2.new(0, 10, 0, 5),
        BackgroundTransparency = 1,
        Text = "Movement",
        TextSize = 16,
        Font = Enum.Font.GothamBold,
        TextXAlignment = Enum.TextXAlignment.Left,
        Parent = section
    })
    
    -- Speed settings
    local speedToggle = UI.createToggle({
        title = "Speed Hack",
        default = false,
        onToggle = function(enabled)
            self.speedEnabled = enabled
            self:updateSpeed()
        end
    })
    speedToggle.Position = UDim2.new(0, 10, 0, 40)
    speedToggle.Parent = section
    
    self.speedSlider = UI.createSlider({
        title = "Speed",
        min = MOVEMENT_SETTINGS.SPEED.min,
        max = MOVEMENT_SETTINGS.SPEED.max,
        default = MOVEMENT_SETTINGS.SPEED.default,
        onValueChanged = function(value)
            self.speedValue = value
            if self.speedEnabled then
                self:updateSpeed()
            end
        end
    })
    self.speedSlider.Position = UDim2.new(0, 10, 0, 80)
    self.speedSlider.Parent = section
    
    -- Jump settings
    local jumpToggle = UI.createToggle({
        title = "Jump Power",
        default = false,
        onToggle = function(enabled)
            self.jumpEnabled = enabled
            self:updateJumpPower()
        end
    })
    jumpToggle.Position = UDim2.new(0, 10, 0, 130)
    jumpToggle.Parent = section
    
    self.jumpSlider = UI.createSlider({
        title = "Jump Height",
        min = MOVEMENT_SETTINGS.JUMP.min,
        max = MOVEMENT_SETTINGS.JUMP.max,
        default = MOVEMENT_SETTINGS.JUMP.default,
        onValueChanged = function(value)
            self.jumpValue = value
            if self.jumpEnabled then
                self:updateJumpPower()
            end
        end
    })
    self.jumpSlider.Position = UDim2.new(0, 10, 0, 170)
    self.jumpSlider.Parent = section
    
    -- Flight settings
    local flyToggle = UI.createToggle({
        title = "Flight",
        default = false,
        onToggle = function(enabled)
            self.flyEnabled = enabled
            self:toggleFlight()
        end
    })
    flyToggle.Position = UDim2.new(0, 10, 0, 220)
    flyToggle.Parent = section
    
    self.flySlider = UI.createSlider({
        title = "Flight Speed",
        min = MOVEMENT_SETTINGS.FLY.min,
        max = MOVEMENT_SETTINGS.FLY.max,
        default = MOVEMENT_SETTINGS.FLY.default,
        onValueChanged = function(value)
            self.flySpeed = value
        end
    })
    self.flySlider.Position = UDim2.new(0, 10, 0, 260)
    self.flySlider.Parent = section
    
    -- Additional movement features
    local features = {
        {name = "Infinite Jump", callback = function(enabled)
            self.infiniteJumpEnabled = enabled
        end},
        {name = "No Clip", callback = function(enabled)
            self:toggleNoClip(enabled)
        end},
        {name = "Bunny Hop", callback = function(enabled)
            self:toggleBunnyHop(enabled)
        end}
    }
    
    for i, feature in ipairs(features) do
        local toggle = UI.createToggle({
            title = feature.name,
            default = false,
            onToggle = feature.callback
        })
        toggle.Position = UDim2.new(0, 10, 0, 300 + (i-1) * 35)
        toggle.Parent = section
    end
end
function MiscTab:createCharacterSection()
    local section = UI.create("Frame", {
        Size = UDim2.new(1, 0, 0, 320),
        Position = UDim2.new(0, 0, 0, 390),
        BackgroundColor3 = COLORS.Secondary,
        Parent = self.container
    })
    
    -- Section header
    UI.create("TextLabel", {
        Size = UDim2.new(1, -20, 0, 30),
        Position = UDim2.new(0, 10, 0, 5),
        BackgroundTransparency = 1,
        Text = "Character",
        TextSize = 16,
        Font = Enum.Font.GothamBold,
        TextXAlignment = Enum.TextXAlignment.Left,
        Parent = section
    })
    
    -- Character features
    local features = {
        {
            name = "God Mode",
            callback = function(enabled)
                self:toggleGodMode(enabled)
            end
        },
        {
            name = "Anti Ragdoll",
            callback = function(enabled)
                self.antiRagdollEnabled = enabled
            end
        },
        {
            name = "Anti Stun",
            callback = function(enabled)
                self.antiStunEnabled = enabled
            end
        },
        {
            name = "Anti Fire",
            callback = function(enabled)
                self.antiFireEnabled = enabled
            end
        },
        {
            name = "Anti Fling",
            callback = function(enabled)
                self:toggleAntiFling(enabled)
            end
        },
        {
            name = "Auto Reset",
            callback = function(enabled)
                self.autoResetEnabled = enabled
            end
        }
    }
    
    for i, feature in ipairs(features) do
        local toggle = UI.createToggle({
            title = feature.name,
            default = false,
            onToggle = feature.callback
        })
        toggle.Position = UDim2.new(0, 10, 0, 40 + (i-1) * 35)
        toggle.Parent = section
    end
    
    -- Health threshold slider
    self.healthSlider = UI.createSlider({
        title = "Auto Reset Health",
        min = 0,
        max = 100,
        default = 25,
        onValueChanged = function(value)
            self.autoResetHealth = value
        end
    })
    self.healthSlider.Position = UDim2.new(0, 10, 0, 260)
    self.healthSlider.Parent = section
end

function MiscTab:createServerSection()
    local section = UI.create("Frame", {
        Size = UDim2.new(1, 0, 0, 280),
        Position = UDim2.new(0, 0, 0, 720),
        BackgroundColor3 = COLORS.Secondary,
        Parent = self.container
    })
    
    -- Section header
    UI.create("TextLabel", {
        Size = UDim2.new(1, -20, 0, 30),
        Position = UDim2.new(0, 10, 0, 5),
        BackgroundTransparency = 1,
        Text = "Server",
        TextSize = 16,
        Font = Enum.Font.GothamBold,
        TextXAlignment = Enum.TextXAlignment.Left,
        Parent = section
    })
    
    -- Server hop button
    local serverHopBtn = UI.create("TextButton", {
        Size = UDim2.new(1, -20, 0, 30),
        Position = UDim2.new(0, 10, 0, 40),
        Text = "Server Hop",
        Parent = section
    })
    
    UI.createRipple(serverHopBtn)
    
    serverHopBtn.MouseButton1Click:Connect(function()
        self:serverHop()
    end)
    
    -- Rejoin button
    local rejoinBtn = UI.create("TextButton", {
        Size = UDim2.new(1, -20, 0, 30),
        Position = UDim2.new(0, 10, 0, 80),
        Text = "Rejoin",
        Parent = section
    })
    
    UI.createRipple(rejoinBtn)
    
    rejoinBtn.MouseButton1Click:Connect(function()
        self:rejoinServer()
    end)
    
    -- Server info
    local info = {
        {name = "Server ID", value = game.JobId},
        {name = "Place ID", value = game.PlaceId},
        {name = "Players", value = #Services.Players:GetPlayers() .. "/" .. Services.Players.MaxPlayers},
        {name = "Time", value = os.date("%H:%M:%S")}
    }
    
    for i, item in ipairs(info) do
        UI.create("TextLabel", {
            Size = UDim2.new(1, -20, 0, 25),
            Position = UDim2.new(0, 10, 0, 120 + (i-1) * 30),
            BackgroundTransparency = 1,
            Text = item.name .. ": " .. item.value,
            TextXAlignment = Enum.TextXAlignment.Left,
            Parent = section
        })
    end
    
    -- Copy JobId button
    local copyJobIdBtn = UI.create("TextButton", {
        Size = UDim2.new(1, -20, 0, 30),
        Position = UDim2.new(0, 10, 0, 240),
        Text = "Copy JobId",
        Parent = section
    })
    
    UI.createRipple(copyJobIdBtn)
    
    copyJobIdBtn.MouseButton1Click:Connect(function()
        setclipboard(game.JobId)
        self:addNotification("Copied JobId to clipboard")
    end)
end
function MiscTab:createUtilitySection()
    local section = UI.create("Frame", {
        Size = UDim2.new(1, 0, 0, 340),
        Position = UDim2.new(0, 0, 0, 1010),
        BackgroundColor3 = COLORS.Secondary,
        Parent = self.container
    })
    
    -- Section header
    UI.create("TextLabel", {
        Size = UDim2.new(1, -20, 0, 30),
        Position = UDim2.new(0, 10, 0, 5),
        BackgroundTransparency = 1,
        Text = "Utility",
        TextSize = 16,
        Font = Enum.Font.GothamBold,
        TextXAlignment = Enum.TextXAlignment.Left,
        Parent = section
    })
    
    -- Utility features
    local features = {
        {
            name = "Anti AFK",
            callback = function(enabled)
                self:toggleAntiAFK(enabled)
            end
        },
        {
            name = "Auto Rejoin",
            callback = function(enabled)
                self.autoRejoinEnabled = enabled
            end
        },
        {
            name = "Chat Logger",
            callback = function(enabled)
                self:toggleChatLogger(enabled)
            end
        },
        {
            name = "Kill Feed",
            callback = function(enabled)
                self:toggleKillFeed(enabled)
            end
        },
        {
            name = "FPS Counter",
            callback = function(enabled)
                self:toggleFPSCounter(enabled)
            end
        },
        {
            name = "Ping Counter",
            callback = function(enabled)
                self:togglePingCounter(enabled)
            end
        }
    }
    
    for i, feature in ipairs(features) do
        local toggle = UI.createToggle({
            title = feature.name,
            default = false,
            onToggle = feature.callback
        })
        toggle.Position = UDim2.new(0, 10, 0, 40 + (i-1) * 35)
        toggle.Parent = section
    end
    
    -- Set final container size
    self.container.CanvasSize = UDim2.new(0, 0, 0, 1360)
end

-- Core functionality implementations
function MiscTab:updateSpeed()
    if not self.speedEnabled then
        -- Reset to default speed
        if Services.Players.LocalPlayer.Character then
            Services.Players.LocalPlayer.Character.Humanoid.WalkSpeed = MOVEMENT_SETTINGS.SPEED.default
        end
        return
    end
    
    if Services.Players.LocalPlayer.Character then
        Services.Players.LocalPlayer.Character.Humanoid.WalkSpeed = self.speedValue
    end
end

function MiscTab:updateJumpPower()
    if not self.jumpEnabled then
        -- Reset to default jump power
        if Services.Players.LocalPlayer.Character then
            Services.Players.LocalPlayer.Character.Humanoid.JumpPower = MOVEMENT_SETTINGS.JUMP.default
        end
        return
    end
    
    if Services.Players.LocalPlayer.Character then
        Services.Players.LocalPlayer.Character.Humanoid.JumpPower = self.jumpValue
    end
end

function MiscTab:toggleFlight()
    if not self.flyEnabled then
        if self.flyConnection then
            self.flyConnection:Disconnect()
            self.flyConnection = nil
        end
        return
    end
    
    local character = Services.Players.LocalPlayer.Character
    if not character then return end
    
    -- Create flight part
    local flyPart = Instance.new("Part")
    flyPart.Size = Vector3.new(0.1, 0.1, 0.1)
    flyPart.Transparency = 1
    flyPart.Anchored = true
    flyPart.CanCollide = false
    flyPart.Parent = character
    
    -- Flight loop
    self.flyConnection = Services.RunService.RenderStepped:Connect(function()
        if not self.flyEnabled then return end
        
        local character = Services.Players.LocalPlayer.Character
        if not character then return end
        
        local humanoid = character:FindFirstChild("Humanoid")
        local rootPart = character:FindFirstChild("HumanoidRootPart")
        if not humanoid or not rootPart then return end
        
        -- Get movement direction
        local moveDirection = humanoid.MoveDirection * self.flySpeed
        
        -- Handle vertical movement
        if Services.UserInputService:IsKeyDown(Enum.KeyCode.Space) then
            moveDirection = moveDirection + Vector3.new(0, self.flySpeed, 0)
        end
        if Services.UserInputService:IsKeyDown(Enum.KeyCode.LeftShift) then
            moveDirection = moveDirection + Vector3.new(0, -self.flySpeed, 0)
        end
        
        -- Update position
        flyPart.CFrame = CFrame.new(rootPart.Position + moveDirection)
        rootPart.CFrame = flyPart.CFrame
    end)
end

function MiscTab:toggleNoClip(enabled)
    if enabled then
        self.noclipConnection = Services.RunService.Stepped:Connect(function()
            if Services.Players.LocalPlayer.Character then
                for _, part in pairs(Services.Players.LocalPlayer.Character:GetDescendants()) do
                    if part:IsA("BasePart") then
                        part.CanCollide = false
                    end
                end
            end
        end)
    else
        if self.noclipConnection then
            self.noclipConnection:Disconnect()
            self.noclipConnection = nil
        end
    end
end

function MiscTab:toggleGodMode(enabled)
    local character = Services.Players.LocalPlayer.Character
    if not character then return end
    
    if enabled then
        -- Store original health
        self.originalMaxHealth = character.Humanoid.MaxHealth
        self.originalHealth = character.Humanoid.Health
        
        -- Make invincible
        character.Humanoid.MaxHealth = math.huge
        character.Humanoid.Health = math.huge
    else
        -- Restore original health
        if self.originalMaxHealth and self.originalHealth then
            character.Humanoid.MaxHealth = self.originalMaxHealth
            character.Humanoid.Health = self.originalHealth
        end
    end
end

function MiscTab:serverHop()
    local servers = {}
    local req = Services.HttpService:JSONDecode(game:HttpGet("https://games.roblox.com/v1/games/" .. game.PlaceId .. "/servers/Public?sortOrder=Asc&limit=100"))
    
    for _, server in pairs(req.data) do
        if server.playing < server.maxPlayers and server.id ~= game.JobId then
            table.insert(servers, server.id)
        end
    end
    
    if #servers > 0 then
        Services.TeleportService:TeleportToPlaceInstance(game.PlaceId, servers[math.random(1, #servers)])
    else
        self:addNotification("No available servers found")
    end
end

function MiscTab:destroy()
    -- Clean up connections
    for _, connection in pairs(self.connections) do
        connection:Disconnect()
    end
    
    -- Reset character modifications
    self.speedEnabled = false
    self.jumpEnabled = false
    self.flyEnabled = false
    self:updateSpeed()
    self:updateJumpPower()
    self:toggleFlight()
    self:toggleNoClip(false)
    self:toggleGodMode(false)
end

-- Config Tab Implementation
local ConfigTab = {}
ConfigTab.__index = ConfigTab

-- Import dependencies
local PhantomHub = shared.PhantomHub or getgenv().PhantomHub
local UI = PhantomHub.UI
local Services = PhantomHub.Services
local COLORS = PhantomHub.colors

-- Constants
local CONFIG_FOLDER = "PhantomHub/Configs"
local DEFAULT_CONFIG = {
    name = "Default",
    settings = {
        combat = {
            aimbot = {
                enabled = false,
                fov = 90,
                smoothness = 0.5
            },
            esp = {
                enabled = false,
                boxes = true,
                tracers = false
            }
        },
        visuals = {
            chams = {
                enabled = false,
                color = Color3.fromRGB(255, 0, 0)
            },
            world = {
                ambient = Color3.fromRGB(127, 127, 127),
                brightness = 1,
                time = 14
            }
        },
        misc = {
            movement = {
                speed = 16,
                jump = 50,
                flight = false
            },
            character = {
                godmode = false,
                antifling = false
            }
        }
    }
}

function ConfigTab.new(parent)
    local self = setmetatable({}, ConfigTab)
    self.parent = parent
    self.configs = {}
    self.currentConfig = nil
    
    -- Create main container
    self.container = UI.create("ScrollingFrame", {
        Size = UDim2.new(1, -20, 1, -20),
        Position = UDim2.new(0, 10, 0, 10),
        BackgroundTransparency = 1,
        ScrollBarThickness = 4,
        ScrollBarImageColor3 = COLORS.Accent,
        Parent = parent
    })
    
    -- Create sections
    self:createConfigListSection()
    self:createConfigManagementSection()
    self:createConfigSettingsSection()
    
    -- Initialize configs
    self:loadConfigs()
    
    return self
end

function ConfigTab:createConfigListSection()
    local section = UI.create("Frame", {
        Size = UDim2.new(1, 0, 0, 400),
        BackgroundColor3 = COLORS.Secondary,
        Parent = self.container
    })
    
    -- Section header
    UI.create("TextLabel", {
        Size = UDim2.new(1, -20, 0, 30),
        Position = UDim2.new(0, 10, 0, 5),
        BackgroundTransparency = 1,
        Text = "Configs",
        TextSize = 16,
        Font = Enum.Font.GothamBold,
        TextXAlignment = Enum.TextXAlignment.Left,
        Parent = section
    })
    
    -- Config list
    self.configList = UI.create("ScrollingFrame", {
        Size = UDim2.new(1, -20, 0, 320),
        Position = UDim2.new(0, 10, 0, 40),
        BackgroundColor3 = COLORS.Background,
        ScrollBarThickness = 4,
        Parent = section
    })
    
    -- List layout
    local listLayout = Instance.new("UIListLayout")
    listLayout.Padding = UDim.new(0, 5)
    listLayout.Parent = self.configList
    
    -- Auto-size
    listLayout:GetPropertyChangedSignal("AbsoluteContentSize"):Connect(function()
        self.configList.CanvasSize = UDim2.new(0, 0, 0, listLayout.AbsoluteContentSize.Y)
    end)
    
    -- Search bar
    local searchBar = UI.create("TextBox", {
        Size = UDim2.new(1, -20, 0, 30),
        Position = UDim2.new(0, 10, 0, 370),
        PlaceholderText = "Search configs...",
        Text = "",
        Parent = section
    })
    
    searchBar:GetPropertyChangedSignal("Text"):Connect(function()
        self:filterConfigs(searchBar.Text)
    end)
end

function ConfigTab:createConfigManagementSection()
    local section = UI.create("Frame", {
        Size = UDim2.new(1, 0, 0, 200),
        Position = UDim2.new(0, 0, 0, 410),
        BackgroundColor3 = COLORS.Secondary,
        Parent = self.container
    })
    
    -- Section header
    UI.create("TextLabel", {
        Size = UDim2.new(1, -20, 0, 30),
        Position = UDim2.new(0, 10, 0, 5),
        BackgroundTransparency = 1,
        Text = "Management",
        TextSize = 16,
        Font = Enum.Font.GothamBold,
        TextXAlignment = Enum.TextXAlignment.Left,
        Parent = section
    })
    
    -- Create buttons
    local buttons = {
        {
            text = "Create New",
            callback = function()
                self:showCreateDialog()
            end
        },
        {
            text = "Save Current",
            callback = function()
                self:saveCurrentConfig()
            end
        },
        {
            text = "Load Selected",
            callback = function()
                self:loadSelectedConfig()
            end
        },
        {
            text = "Delete Selected",
            callback = function()
                self:deleteSelectedConfig()
            end
        },
        {
            text = "Export to Clipboard",
            callback = function()
                self:exportConfig()
            end
        },
        {
            text = "Import from Clipboard",
            callback = function()
                self:importConfig()
            end
        }
    }
        -- Create management buttons
    for i, button in ipairs(buttons) do
        local btn = UI.create("TextButton", {
            Size = UDim2.new(0.5, -15, 0, 30),
            Position = UDim2.new(
                i % 2 == 1 and 0 or 0.5,
                i % 2 == 1 and 10 or -5,
                0,
                40 + math.floor((i-1) / 2) * 40
            ),
            Text = button.text,
            Parent = section
        })
        
        UI.createRipple(btn)
        btn.MouseButton1Click:Connect(button.callback)
    end
end

function ConfigTab:createConfigSettingsSection()
    local section = UI.create("Frame", {
        Size = UDim2.new(1, 0, 0, 400),
        Position = UDim2.new(0, 0, 0, 620),
        BackgroundColor3 = COLORS.Secondary,
        Parent = self.container
    })
    
    -- Section header
    UI.create("TextLabel", {
        Size = UDim2.new(1, -20, 0, 30),
        Position = UDim2.new(0, 10, 0, 5),
        BackgroundTransparency = 1,
        Text = "Settings",
        TextSize = 16,
        Font = Enum.Font.GothamBold,
        TextXAlignment = Enum.TextXAlignment.Left,
        Parent = section
    })
    
    -- Auto-save toggle
    local autoSaveToggle = UI.createToggle({
        title = "Auto Save",
        default = false,
        onToggle = function(enabled)
            self.autoSaveEnabled = enabled
        end
    })
    autoSaveToggle.Position = UDim2.new(0, 10, 0, 40)
    autoSaveToggle.Parent = section
    
    -- Auto-load toggle
    local autoLoadToggle = UI.createToggle({
        title = "Auto Load Last Config",
        default = false,
        onToggle = function(enabled)
            self.autoLoadEnabled = enabled
            self:saveSettings()
        end
    })
    autoLoadToggle.Position = UDim2.new(0, 10, 0, 80)
    autoLoadToggle.Parent = section
    
    -- Cloud sync toggle
    local cloudSyncToggle = UI.createToggle({
        title = "Cloud Sync",
        default = false,
        onToggle = function(enabled)
            self.cloudSyncEnabled = enabled
            if enabled then
                self:initializeCloudSync()
            end
        end
    })
    cloudSyncToggle.Position = UDim2.new(0, 10, 0, 120)
    cloudSyncToggle.Parent = section
    
    -- Backup settings
    local backupSection = UI.create("Frame", {
        Size = UDim2.new(1, -20, 0, 200),
        Position = UDim2.new(0, 10, 0, 170),
        BackgroundColor3 = COLORS.Background,
        Parent = section
    })
    
    UI.create("TextLabel", {
        Size = UDim2.new(1, -20, 0, 30),
        Position = UDim2.new(0, 10, 0, 5),
        BackgroundTransparency = 1,
        Text = "Backup Settings",
        TextSize = 14,
        Font = Enum.Font.GothamBold,
        TextXAlignment = Enum.TextXAlignment.Left,
        Parent = backupSection
    })
    
    -- Auto backup toggle
    local autoBackupToggle = UI.createToggle({
        title = "Auto Backup",
        default = false,
        onToggle = function(enabled)
            self.autoBackupEnabled = enabled
            self:saveSettings()
        end
    })
    autoBackupToggle.Position = UDim2.new(0, 10, 0, 40)
    autoBackupToggle.Parent = backupSection
    
    -- Backup interval slider
    self.backupIntervalSlider = UI.createSlider({
        title = "Backup Interval (minutes)",
        min = 5,
        max = 120,
        default = 30,
        onValueChanged = function(value)
            self.backupInterval = value
            self:saveSettings()
        end
    })
    self.backupIntervalSlider.Position = UDim2.new(0, 10, 0, 80)
    self.backupIntervalSlider.Parent = backupSection
    
    -- Keep backups slider
    self.keepBackupsSlider = UI.createSlider({
        title = "Keep Backups",
        min = 1,
        max = 50,
        default = 10,
        onValueChanged = function(value)
            self.keepBackups = value
            self:saveSettings()
        end
    })
    self.keepBackupsSlider.Position = UDim2.new(0, 10, 0, 130)
    self.keepBackupsSlider.Parent = backupSection
    
    -- Create backup button
    local createBackupBtn = UI.create("TextButton", {
        Size = UDim2.new(1, -20, 0, 30),
        Position = UDim2.new(0, 10, 0, 160),
        Text = "Create Backup",
        Parent = backupSection
    })
    
    UI.createRipple(createBackupBtn)
    createBackupBtn.MouseButton1Click:Connect(function()
        self:createBackup()
    end)
    
    -- Set final container size
    self.container.CanvasSize = UDim2.new(0, 0, 0, 1030)
end
function ConfigTab:loadConfigs()
    -- Create config directory if it doesn't exist
    if not isfolder(CONFIG_FOLDER) then
        makefolder(CONFIG_FOLDER)
    end
    
    -- Load all config files
    for _, file in ipairs(listfiles(CONFIG_FOLDER)) do
        if file:sub(-5) == ".json" then
            local success, config = pcall(function()
                return Services.HttpService:JSONDecode(readfile(file))
            end)
            
            if success then
                self.configs[config.name] = config
                self:createConfigEntry(config)
            end
        end
    end
    
    -- Create default config if none exist
    if not next(self.configs) then
        self:createConfig(DEFAULT_CONFIG)
    end
end

function ConfigTab:createConfigEntry(config)
    local entry = UI.create("Frame", {
        Size = UDim2.new(1, -10, 0, 50),
        BackgroundColor3 = COLORS.Background,
        Parent = self.configList
    })
    
    -- Config name
    UI.create("TextLabel", {
        Size = UDim2.new(1, -100, 0, 25),
        Position = UDim2.new(0, 10, 0, 5),
        BackgroundTransparency = 1,
        Text = config.name,
        TextSize = 14,
        Font = Enum.Font.GothamBold,
        TextXAlignment = Enum.TextXAlignment.Left,
        Parent = entry
    })
    
    -- Last modified
    UI.create("TextLabel", {
        Size = UDim2.new(1, -100, 0, 20),
        Position = UDim2.new(0, 10, 0, 25),
        BackgroundTransparency = 1,
        Text = "Last modified: " .. (config.lastModified or "Never"),
        TextSize = 12,
        TextColor3 = COLORS.TextDark,
        TextXAlignment = Enum.TextXAlignment.Left,
        Parent = entry
    })
    
    -- Select button
    local selectBtn = UI.create("TextButton", {
        Size = UDim2.new(0, 80, 0, 25),
        Position = UDim2.new(1, -90, 0, 12),
        Text = "Select",
        Parent = entry
    })
    
    UI.createRipple(selectBtn)
    
    selectBtn.MouseButton1Click:Connect(function()
        self:selectConfig(config)
    end)
    
    return entry
end

function ConfigTab:selectConfig(config)
    if self.currentConfig then
        self.currentConfig.entry.BackgroundColor3 = COLORS.Background
    end
    
    self.currentConfig = {
        name = config.name,
        settings = config.settings,
        entry = config.entry
    }
    
    config.entry.BackgroundColor3 = COLORS.Accent
end

function ConfigTab:showCreateDialog()
    local dialog = UI.createDialog({
        title = "Create New Config",
        fields = {
            {
                name = "Name",
                type = "text",
                placeholder = "Enter config name..."
            },
            {
                name = "Base Config",
                type = "dropdown",
                options = self:getConfigNames(),
                default = "Default"
            }
        },
        callback = function(data)
            self:createConfig({
                name = data.Name,
                settings = self.configs[data["Base Config"]].settings
            })
        end
    })
    
    dialog.Parent = self.parent.Parent
end

function ConfigTab:createConfig(config)
    -- Validate config name
    if self.configs[config.name] then
        self:addNotification("Config name already exists")
        return
    end
    
    -- Add timestamp
    config.lastModified = os.date("%Y-%m-%d %H:%M:%S")
    
    -- Create config entry
    config.entry = self:createConfigEntry(config)
    
    -- Save config
    self.configs[config.name] = config
    self:saveConfig(config)
    
    -- Select new config
    self:selectConfig(config)
end

function ConfigTab:saveConfig(config)
    local success, encoded = pcall(function()
        return Services.HttpService:JSONEncode(config)
    end)
    
    if success then
        writefile(CONFIG_FOLDER .. "/" .. config.name .. ".json", encoded)
        
        if self.cloudSyncEnabled then
            self:syncToCloud(config)
        end
    end
end

function ConfigTab:createBackup()
    if not self.currentConfig then return end
    
    local timestamp = os.date("%Y%m%d_%H%M%S")
    local backupName = string.format(
        "%s_backup_%s",
        self.currentConfig.name,
        timestamp
    )
    
    local backup = {
        name = backupName,
        settings = self.currentConfig.settings,
        lastModified = os.date("%Y-%m-%d %H:%M:%S")
    }
    
    -- Save backup
    self:saveConfig(backup)
    
    -- Clean old backups
    self:cleanBackups()
end

function ConfigTab:cleanBackups()
    local backups = {}
    
    -- Get all backups for current config
    for name, config in pairs(self.configs) do
        if name:find(self.currentConfig.name .. "_backup_") then
            table.insert(backups, {
                name = name,
                time = config.lastModified
            })
        end
    end
    
    -- Sort by date (newest first)
    table.sort(backups, function(a, b)
        return a.time > b.time
    end)
    
    -- Remove excess backups
    for i = self.keepBackups + 1, #backups do
        local backup = backups[i]
        delfile(CONFIG_FOLDER .. "/" .. backup.name .. ".json")
        self.configs[backup.name] = nil
    end
end

function ConfigTab:initializeCloudSync()
    -- Implement cloud sync functionality here
    -- This could use a web API or Discord webhook
end

function ConfigTab:destroy()
    -- Save current config if auto-save is enabled
    if self.autoSaveEnabled and self.currentConfig then
        self:saveConfig(self.currentConfig)
    end
    
    -- Save settings
    self:saveSettings()
end

-- Script Tab Implementation
local ScriptTab = {}
ScriptTab.__index = ScriptTab

-- Import dependencies
local PhantomHub = shared.PhantomHub or getgenv().PhantomHub
local UI = PhantomHub.UI
local Services = PhantomHub.Services
local COLORS = PhantomHub.colors

-- Constants
local SCRIPT_FOLDER = "PhantomHub/Scripts"
local SCRIPT_CATEGORIES = {
    "Universal",
    "Game Specific",
    "Utilities",
    "Fun",
    "Custom"
}

function ScriptTab.new(parent)
    local self = setmetatable({}, ScriptTab)
    self.parent = parent
    self.scripts = {}
    self.favorites = {}
    self.history = {}
    
    -- Create main container
    self.container = UI.create("ScrollingFrame", {
        Size = UDim2.new(1, -20, 1, -20),
        Position = UDim2.new(0, 10, 0, 10),
        BackgroundTransparency = 1,
        ScrollBarThickness = 4,
        ScrollBarImageColor3 = COLORS.Accent,
        Parent = parent
    })
    
    -- Create sections
    self:createScriptListSection()
    self:createScriptEditorSection()
    self:createScriptManagementSection()
    
    -- Initialize scripts
    self:loadScripts()
    self:loadFavorites()
    
    return self
end

function ScriptTab:createScriptListSection()
    local section = UI.create("Frame", {
        Size = UDim2.new(1, 0, 0, 400),
        BackgroundColor3 = COLORS.Secondary,
        Parent = self.container
    })
    
    -- Section header
    UI.create("TextLabel", {
        Size = UDim2.new(1, -20, 0, 30),
        Position = UDim2.new(0, 10, 0, 5),
        BackgroundTransparency = 1,
        Text = "Scripts",
        TextSize = 16,
        Font = Enum.Font.GothamBold,
        TextXAlignment = Enum.TextXAlignment.Left,
        Parent = section
    })
    
    -- Category selector
    local categoryDropdown = UI.createDropdown({
        title = "Category",
        options = SCRIPT_CATEGORIES,
        default = "Universal",
        onSelect = function(category)
            self:filterScripts(category)
        end
    })
    categoryDropdown.Position = UDim2.new(0, 10, 0, 40)
    categoryDropdown.Parent = section
    
    -- Search bar
    local searchBar = UI.create("TextBox", {
        Size = UDim2.new(1, -20, 0, 30),
        Position = UDim2.new(0, 10, 0, 90),
        PlaceholderText = "Search scripts...",
        Text = "",
        Parent = section
    })
    
    searchBar:GetPropertyChangedSignal("Text"):Connect(function()
        self:searchScripts(searchBar.Text)
    end)
    
    -- Script list
    self.scriptList = UI.create("ScrollingFrame", {
        Size = UDim2.new(1, -20, 0, 260),
        Position = UDim2.new(0, 10, 0, 130),
        BackgroundColor3 = COLORS.Background,
        ScrollBarThickness = 4,
        Parent = section
    })
    
    -- List layout
    local listLayout = Instance.new("UIListLayout")
    listLayout.Padding = UDim.new(0, 5)
    listLayout.Parent = self.scriptList
    
    -- Auto-size
    listLayout:GetPropertyChangedSignal("AbsoluteContentSize"):Connect(function()
        self.scriptList.CanvasSize = UDim2.new(0, 0, 0, listLayout.AbsoluteContentSize.Y)
    end)
end

function ScriptTab:createScriptEditorSection()
    local section = UI.create("Frame", {
        Size = UDim2.new(1, 0, 0, 400),
        Position = UDim2.new(0, 0, 0, 410),
        BackgroundColor3 = COLORS.Secondary,
        Parent = self.container
    })
    
    -- Section header
    UI.create("TextLabel", {
        Size = UDim2.new(1, -20, 0, 30),
        Position = UDim2.new(0, 10, 0, 5),
        BackgroundTransparency = 1,
        Text = "Editor",
        TextSize = 16,
        Font = Enum.Font.GothamBold,
        TextXAlignment = Enum.TextXAlignment.Left,
        Parent = section
    })
    
    -- Editor
    self.editor = UI.create("TextBox", {
        Size = UDim2.new(1, -20, 0, 320),
        Position = UDim2.new(0, 10, 0, 40),
        BackgroundColor3 = COLORS.Background,
        ClearTextOnFocus = false,
        MultiLine = true,
        TextXAlignment = Enum.TextXAlignment.Left,
        TextYAlignment = Enum.TextYAlignment.Top,
        TextSize = 14,
        Font = Enum.Font.Code,
        Parent = section
    })
    
    -- Editor buttons
    local buttons = {
        {
            text = "Execute",
            callback = function()
                self:executeScript()
            end
        },
        {
            text = "Save",
            callback = function()
                self:saveScript()
            end
        },
        {
            text = "Clear",
            callback = function()
                self.editor.Text = ""
            end
        }
    }
    
    for i, button in ipairs(buttons) do
        local btn = UI.create("TextButton", {
            Size = UDim2.new(0, 100, 0, 25),
            Position = UDim2.new(0, 10 + (i-1) * 110, 0, 370),
            Text = button.text,
            Parent = section
        })
        
        UI.createRipple(btn)
        btn.MouseButton1Click:Connect(button.callback)
    end
end
function ScriptTab:createScriptManagementSection()
    local section = UI.create("Frame", {
        Size = UDim2.new(1, 0, 0, 280),
        Position = UDim2.new(0, 0, 0, 820),
        BackgroundColor3 = COLORS.Secondary,
        Parent = self.container
    })
    
    -- Section header
    UI.create("TextLabel", {
        Size = UDim2.new(1, -20, 0, 30),
        Position = UDim2.new(0, 10, 0, 5),
        BackgroundTransparency = 1,
        Text = "Management",
        TextSize = 16,
        Font = Enum.Font.GothamBold,
        TextXAlignment = Enum.TextXAlignment.Left,
        Parent = section
    })
    
    -- Management buttons
    local buttons = {
        {
            text = "New Script",
            callback = function()
                self:showCreateDialog()
            end
        },
        {
            text = "Import from URL",
            callback = function()
                self:showImportDialog()
            end
        },
        {
            text = "Export to Clipboard",
            callback = function()
                self:exportScript()
            end
        },
        {
            text = "Delete Selected",
            callback = function()
                self:deleteScript()
            end
        }
    }
    
    for i, button in ipairs(buttons) do
        local btn = UI.create("TextButton", {
            Size = UDim2.new(0.5, -15, 0, 30),
            Position = UDim2.new(
                i % 2 == 1 and 0 or 0.5,
                i % 2 == 1 and 10 or -5,
                0,
                40 + math.floor((i-1) / 2) * 40
            ),
            Text = button.text,
            Parent = section
        })
        
        UI.createRipple(btn)
        btn.MouseButton1Click:Connect(button.callback)
    end
    
    -- History section
    local historySection = UI.create("Frame", {
        Size = UDim2.new(1, -20, 0, 150),
        Position = UDim2.new(0, 10, 0, 120),
        BackgroundColor3 = COLORS.Background,
        Parent = section
    })
    
    UI.create("TextLabel", {
        Size = UDim2.new(1, -20, 0, 30),
        Position = UDim2.new(0, 10, 0, 5),
        BackgroundTransparency = 1,
        Text = "Recent Scripts",
        TextSize = 14,
        Font = Enum.Font.GothamBold,
        TextXAlignment = Enum.TextXAlignment.Left,
        Parent = historySection
    })
    
    self.historyList = UI.create("ScrollingFrame", {
        Size = UDim2.new(1, -20, 0, 110),
        Position = UDim2.new(0, 10, 0, 35),
        BackgroundTransparency = 1,
        ScrollBarThickness = 4,
        Parent = historySection
    })
    
    -- List layout for history
    local historyLayout = Instance.new("UIListLayout")
    historyLayout.Padding = UDim.new(0, 5)
    historyLayout.Parent = self.historyList
    
    -- Set final container size
    self.container.CanvasSize = UDim2.new(0, 0, 0, 1110)
end

function ScriptTab:createScriptEntry(script)
    local entry = UI.create("Frame", {
        Size = UDim2.new(1, -10, 0, 60),
        BackgroundColor3 = COLORS.Background,
        Parent = self.scriptList
    })
    
    -- Script name
    UI.create("TextLabel", {
        Size = UDim2.new(1, -120, 0, 25),
        Position = UDim2.new(0, 10, 0, 5),
        BackgroundTransparency = 1,
        Text = script.name,
        TextSize = 14,
        Font = Enum.Font.GothamBold,
        TextXAlignment = Enum.TextXAlignment.Left,
        Parent = entry
    })
    
    -- Script info
    UI.create("TextLabel", {
        Size = UDim2.new(1, -120, 0, 20),
        Position = UDim2.new(0, 10, 0, 30),
        BackgroundTransparency = 1,
        Text = string.format("%s • %s", script.category, script.author or "Unknown"),
        TextSize = 12,
        TextColor3 = COLORS.TextDark,
        TextXAlignment = Enum.TextXAlignment.Left,
        Parent = entry
    })
    
    -- Favorite button
    local favBtn = UI.create("ImageButton", {
        Size = UDim2.new(0, 20, 0, 20),
        Position = UDim2.new(1, -110, 0, 20),
        Image = self.favorites[script.name] and "rbxassetid://star_filled" or "rbxassetid://star_empty",
        Parent = entry
    })
    
    favBtn.MouseButton1Click:Connect(function()
        self:toggleFavorite(script)
        favBtn.Image = self.favorites[script.name] and "rbxassetid://star_filled" or "rbxassetid://star_empty"
    end)
    
    -- Load button
    local loadBtn = UI.create("TextButton", {
        Size = UDim2.new(0, 80, 0, 25),
        Position = UDim2.new(1, -90, 0, 17),
        Text = "Load",
        Parent = entry
    })
    
    UI.createRipple(loadBtn)
    
    loadBtn.MouseButton1Click:Connect(function()
        self:loadScript(script)
    end)
    
    return entry
end

function ScriptTab:createHistoryEntry(script)
    local entry = UI.create("TextButton", {
        Size = UDim2.new(1, -10, 0, 25),
        BackgroundColor3 = COLORS.Background,
        Text = script.name,
        TextSize = 12,
        Font = Enum.Font.Gotham,
        TextXAlignment = Enum.TextXAlignment.Left,
        Parent = self.historyList
    })
    
    UI.createRipple(entry)
    
    entry.MouseButton1Click:Connect(function()
        self:loadScript(script)
    end)
    
    return entry
end
function ScriptTab:loadScripts()
    -- Create script directory if it doesn't exist
    if not isfolder(SCRIPT_FOLDER) then
        makefolder(SCRIPT_FOLDER)
    end
    
    -- Load all script files
    for _, file in ipairs(listfiles(SCRIPT_FOLDER)) do
        if file:sub(-4) == ".lua" then
            local success, content = pcall(function()
                return readfile(file)
            end)
            
            if success then
                local scriptName = file:match("([^/]+)%.lua$")
                local script = {
                    name = scriptName,
                    content = content,
                    category = "Custom", -- Default category for local scripts
                    author = "Local"
                }
                
                self.scripts[scriptName] = script
                self:createScriptEntry(script)
            end
        end
    end
    
    -- Load built-in scripts
    for _, script in ipairs(PhantomHub.builtInScripts) do
        self.scripts[script.name] = script
        self:createScriptEntry(script)
    end
end

function ScriptTab:loadFavorites()
    local success, favorites = pcall(function()
        return Services.HttpService:JSONDecode(readfile(SCRIPT_FOLDER .. "/favorites.json"))
    end)
    
    if success then
        self.favorites = favorites
    end
end

function ScriptTab:saveFavorites()
    local success, encoded = pcall(function()
        return Services.HttpService:JSONEncode(self.favorites)
    end)
    
    if success then
        writefile(SCRIPT_FOLDER .. "/favorites.json", encoded)
    end
end

function ScriptTab:toggleFavorite(script)
    if self.favorites[script.name] then
        self.favorites[script.name] = nil
    else
        self.favorites[script.name] = true
    end
    
    self:saveFavorites()
end

function ScriptTab:loadScript(script)
    -- Add to history
    table.insert(self.history, 1, script)
    if #self.history > 10 then
        table.remove(self.history)
    end
    
    -- Update history UI
    for _, entry in ipairs(self.historyList:GetChildren()) do
        if entry:IsA("TextButton") then
            entry:Destroy()
        end
    end
    
    for _, historyScript in ipairs(self.history) do
        self:createHistoryEntry(historyScript)
    end
    
    -- Load script content into editor
    self.editor.Text = script.content
end

function ScriptTab:executeScript()
    local script = self.editor.Text
    if script == "" then return end
    
    local success, err = pcall(function()
        loadstring(script)()
    end)
    
    if not success then
        self:addNotification("Script Error: " .. err, "ERROR")
    else
        self:addNotification("Script executed successfully", "SUCCESS")
    end
end

function ScriptTab:saveScript()
    if self.editor.Text == "" then return end
    
    self:showSaveDialog(function(data)
        local script = {
            name = data.Name,
            content = self.editor.Text,
            category = data.Category,
            author = "Local"
        }
        
        -- Save to file
        writefile(SCRIPT_FOLDER .. "/" .. script.name .. ".lua", script.content)
        
        -- Add to scripts list
        self.scripts[script.name] = script
        self:createScriptEntry(script)
        
        self:addNotification("Script saved successfully", "SUCCESS")
    end)
end

function ScriptTab:showSaveDialog(callback)
    local dialog = UI.createDialog({
        title = "Save Script",
        fields = {
            {
                name = "Name",
                type = "text",
                placeholder = "Enter script name..."
            },
            {
                name = "Category",
                type = "dropdown",
                options = SCRIPT_CATEGORIES,
                default = "Custom"
            }
        },
        callback = callback
    })
    
    dialog.Parent = self.parent.Parent
end

function ScriptTab:showImportDialog()
    local dialog = UI.createDialog({
        title = "Import Script",
        fields = {
            {
                name = "URL",
                type = "text",
                placeholder = "Enter script URL..."
            }
        },
        callback = function(data)
            self:importFromURL(data.URL)
        end
    })
    
    dialog.Parent = self.parent.Parent
end

function ScriptTab:importFromURL(url)
    local success, content = pcall(function()
        return game:HttpGet(url)
    end)
    
    if success then
        self.editor.Text = content
        self:addNotification("Script imported successfully", "SUCCESS")
    else
        self:addNotification("Failed to import script: " .. content, "ERROR")
    end
end

function ScriptTab:exportScript()
    if self.editor.Text == "" then return end
    
    setclipboard(self.editor.Text)
    self:addNotification("Script copied to clipboard", "SUCCESS")
end

function ScriptTab:deleteScript()
    if not self.currentScript then return end
    
    -- Remove file
    delfile(SCRIPT_FOLDER .. "/" .. self.currentScript.name .. ".lua")
    
    -- Remove from scripts list
    self.scripts[self.currentScript.name] = nil
    self.currentScript.entry:Destroy()
    
    -- Clear editor if current script is loaded
    if self.editor.Text == self.currentScript.content then
        self.editor.Text = ""
    end
    
    self:addNotification("Script deleted successfully", "SUCCESS")
end

function ScriptTab:filterScripts(category)
    for _, entry in ipairs(self.scriptList:GetChildren()) do
        if entry:IsA("Frame") then
            local scriptName = entry.TextLabel.Text
            local script = self.scripts[scriptName]
            
            entry.Visible = category == "All" or script.category == category
        end
    end
end

function ScriptTab:searchScripts(query)
    query = query:lower()
    
    for _, entry in ipairs(self.scriptList:GetChildren()) do
        if entry:IsA("Frame") then
            local scriptName = entry.TextLabel.Text:lower()
            -- Handle nil query case and empty query should show all scripts
            if query == "" then
                entry.Visible = true
            else
                entry.Visible = scriptName:find(query, 1, true) ~= nil
            end
        end
    end
end

function ScriptTab:destroy()
    -- Save favorites and clean up
    self:saveFavorites()
    
    -- Clean up any connections or references
    if self.editor then
        self.editor:Destroy()
        self.editor = nil
    end
    
    if self.scriptList then
        self.scriptList:Destroy() 
        self.scriptList = nil
    end
end
end
